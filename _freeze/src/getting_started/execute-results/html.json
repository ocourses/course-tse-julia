{
  "hash": "738ef99630da92182dc8d642e606c9d5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Getting Started with Julia\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nThis page provides an introduction to the [Julia programming language](https://julialang.org), including its key features and installation process. You'll learn how to install Julia on different operating systems and how to verify the installation. It also covers using the Julia REPL for interactive coding, creating and running Julia scripts, and managing packages with Julia's built-in package manager, `Pkg`. Additionally, this page provides resources for learning and getting help with Julia, including official documentation, community platforms, and an overview of the Julia ecosystem.\n\nKey Topics:\n\n- **Introduction to Julia**: What makes Julia ideal for scientific computing and data analysis.\n- **Installing Julia**: Step-by-step guide for installation on Mac, Linux, and Windows.\n- **Using the Julia REPL**: How to interactively run Julia code.\n- **Running Julia Scripts**: Creating and executing Julia scripts.\n- **Editors and IDEs**: Overview of top editors and IDEs for Julia, including VS Code, Jupyter, Pluto.jl, Vim, and Emacs.\n- **Julia Documentation**: Overview of the official Julia documentation and how to use built-in help features in the REPL.\n- **Package Management**: Installing, updating, and managing Julia packages.\n- **Getting Help**: Accessing Julia documentation and community resources.\n- **Julia Ecosystem**: Introduction to JuliaHub, JuliaSim, and JuliaCon, as well as other valuable tools and resources within the Julia ecosystem.\n\n::: {.callout-tip}\nThis guide is designed for beginners and provides a comprehensive overview of the Julia programming language. Whether you're new to programming or an experienced developer looking to learn Julia, this guide will help you get started with the language. If you want to go deeper into specific topics, check out the [Julia Documentation](https://docs.julialang.org) and other resources mentioned in this guide. The website [Modern Julia Workflows](https://modernjuliaworkflows.org) is a great resource for learning advanced Julia programming techniques.\n:::\n\n## Introduction to Julia Programming Language\n\nWelcome to the world of Julia! This section will introduce you to the language, explaining why itâ€™s gaining popularity, and highlighting some key features that make Julia a unique tool for scientific computing and general-purpose programming.\n\n### What is Julia?\n\nJulia is a high-level, high-performance programming language primarily designed for technical computing. It combines the best features of other programming languages, including Python's ease of use, C's speed, and MATLAB's support for numerical computation. Julia is open-source and has become a go-to language for scientific research, data analysis, and machine learning applications.\n\n### Why Julia?\n\n- **High performance**: Julia is designed for performance from the ground up. It often performs on par with statically typed languages like C or Fortran, thanks to Just-In-Time (JIT) compilation using LLVM.\n  \n- **Multiple dispatch**: Julia uses multiple dispatch as its core paradigm, which allows for highly flexible and efficient function definitions.\n  \n- **Designed for scientific computing**: Julia excels in areas such as linear algebra, numerical analysis, and optimization, making it a great choice for data-heavy fields like economics, physics, and engineering.\n\n- **Ease of use**: Julia offers a simple, intuitive syntax similar to Python and MATLAB, which makes it easy to learn and use, even for those with little programming experience.\n\n## Installing Julia\n\n### Download Julia\n\nTo get started with Julia, you first need to install the language on your computer. The official Julia website provides the installation files for various operating systems, including Windows, macOS, and Linux. Follow these steps:\n\n1. Visit the official [Julia Downloads](https://julialang.org/downloads/) page.\n2. Choose the appropriate version of Julia for your operating system.\n3. Download the installer (the latest stable version is recommended for most users).\n\n### Installation Instructions\n\nBefore you can start using Julia, you need to install it on your system. Below are the steps for installing Julia on different operating systems: Mac, Linux, and Windows.\n\n::: {.panel-tabset}\n\n### Mac / Linux\n\nTo install the latest stable version of Julia on Mac or Linux, follow these simple steps:\n\n1. Open your terminal.\n2. Run the following command to download and install Julia:\n\n```bash\ncurl -fsSL https://install.julialang.org | sh\n```\n\nThis command downloads the Julia installation script and runs it automatically. It will install Julia and place it in your /usr/local/bin directory by default.\n\n### Windows\n\nTo install Julia on Windows, follow these steps:\n\n1. Open the [Microsoft Store page for Julia](https://www.microsoft.com/store/apps/9NJNWW8PVKMN).\n2. Click \"Get\" to download and install the latest version of Julia from the Microsoft Store.\n\nAlternatively, you can install Julia using the Windows Package Manager (winget). Open the command prompt and run the following command:\n\n```bash\nwinget install julia -s msstore\n```\n\nAfter installation, you can launch Julia by searching for it in the Start menu or by running julia in the command prompt.\n:::\n\n### Verify Installation\n\nAfter installation, you can verify that Julia is correctly installed by opening a terminal or command prompt and typing the following command:\n\n```bash\njulia\n```\n\nThis will launch the Julia REPL (Read-Eval-Print Loop), where you can start running Julia commands interactively. You should see something similar to the following:\n\n::: {#4c13b5a9 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=3}\n```julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.11.6 (2025-07-09)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\n\njulia>\n```\n\n:::\n:::\n\n\nIf you see this prompt, it means Julia is installed and working correctly!\n\n### Discover the Package Manager\n\nJulia includes a built-in [package manager](https://docs.julialang.org/en/v1/stdlib/Pkg/), `Pkg`, that allows you to easily manage external packages (libraries) for your projects.\n\n1. To start using `Pkg`, open the Julia REPL and type:\n   ```julia\n   using Pkg\n   ```\n\n2. You can install a package by running:\n   ```julia\n   Pkg.add(\"PackageName\")\n   ```\n\nFor example, to install the popular plotting package `Plots`, run:\n```julia\nPkg.add(\"Plots\")\n```\n\nThis will download and install the package, making it available for use in your Julia scripts.\n\n## Using the Julia REPL\n\nThe [Julia REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) (Read-Eval-Print Loop) is an interactive command-line environment for executing Julia code. It allows you to run Julia code line-by-line, evaluate expressions, and see the results immediately.\n\n### Starting the REPL\n\nTo start the Julia REPL, open your terminal or command prompt and simply type:\n\n```bash\njulia\n```\n\nYou should see the Julia prompt, which looks like this:\n\n::: {#e892e4c7 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=4}\n```julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.11.6 (2025-07-09)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\n\njulia>\n```\n\n:::\n:::\n\n\nThis is the REPL where you can start typing Julia expressions.\n\n### Basic Commands\n\nIn the REPL, you can type expressions and commands. For example:\n\n- To perform a simple arithmetic operation, type:\n\n```julia\n3 + 4\n```\n\nThe result will appear right below the command, like so:\n\n```julia\n7\n```\n\n- To assign a value to a variable, use the `=` sign:\n\n```julia\nx = 10\n```\n\nNow, `x` holds the value 10. You can use it in further expressions:\n\n```julia\nx * 2\n```\n\nThe result will be:\n\n```julia\n20\n```\n\n### Using REPL Features\n\nThe Julia REPL has several features that make it more convenient to use:\n\n1. **History:** You can use the up and down arrow keys to scroll through your command history and reuse previous commands.\n\n2. **Tab Completion:** Type part of a function or variable name and press `Tab` to automatically complete it or show suggestions.\n\n3. **Help:** Type `?` followed by a function or type name to get documentation directly in the REPL. For example:\n\n```julia\n?sum\n```\n\nThis will show information about the `sum` function.\n\n4. **Exiting the REPL:** To exit the REPL, simply type:\n\n```julia\nexit()\n```\n\nOr press `Ctrl-D` (on most systems).\n\n### REPL Modes\n\nThe Julia REPL has different prompt modes that can be very useful to install / remove packages, run shell commands, search for help, etc.\nThe different modes are:\n\n- The Julian mode\n- Help mode\n- Package mode\n- Shell mode\n\nVisit the [command-line REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) page for more details.\n\n::: {.panel-tabset}\n\n#### Help mode\n\nBy pressing `?` you can obtain information and metadata about Julia objects (functions, types, etc.) or unicode symbols.\nThe query fetches the docstring of the object, which explains how to use it.\n\n```julia\nhelp?> println\n```\n\nIf you don't know the exact name you are looking for, type a word surrounded by quotes to see in which docstrings it pops up.\nTo come back to Julia mode, hit backspace.\n\n#### Package mode\n\nBy pressing `]` you access [Pkg.jl](https://github.com/JuliaLang/Pkg.jl), Julia's integrated package manager.\nPlease visit the [documentation](https://pkgdocs.julialang.org/v1/getting-started/) for details.\nPkg.jl allows you to:\n\n* `]activate` different local, shared or temporary environments;\n* `]instantiate` them by downloading the necessary packages;\n* `]add`, `]update` (or `]up`) and `]remove` (or `]rm`) packages;\n* get the `]status` (or `]st`) of your current environment.\n\nAs an illustration, we download the package Plots.jl inside our current environment:\n\n```julia\npkg> add Plots\n```\n\nNote that you can do the same in Julia mode:\n\n```julia\njulia> using Pkg\njulia> Pkg.rm(\"Plots\")\n```\n\nThe package mode itself also has a help mode, accessed with `?`.\nTo come back to Julia mode, hit backspace.\n\n#### Shell mode\n\nBy pressing `;` you enter a terminal, where you can execute any command you want.\nHere's an example for Unix systems:\n\n```julia\nshell> pwd\n```\n\nTo come back to Julia mode, hit backspace.\n\n:::\n\n## Running Julia Scripts\n\nWhile the Julia REPL is great for interactive experimentation, youâ€™ll often want to write and run larger programs. This is where running Julia scripts comes in.\n\n### Creating a Julia Script\n\nA Julia script is a plain text file that contains Julia code. You can create a Julia script using any text editor, such as VS Code, Sublime Text, or even a simple text editor. \n\nSave the file with the `.jl` extension, for example `myscript.jl`.\n\n### Running a Julia Script\n\nTo run a Julia script, open your terminal or command prompt, navigate to the directory where the script is located, and then use the following command:\n\n```bash\njulia myscript.jl\n```\n\nThis will execute the code in `myscript.jl` and output any results in the terminal. If your script includes print statements, those outputs will be displayed. See the [command-line interface](https://docs.julialang.org/en/v1/manual/command-line-interface/) page for more details.\n\n### Example: Running a Script\n\nHereâ€™s an example of a simple Julia script:\n\n```julia\n# myscript.jl\nprintln(\"Hello, World!\")\nx = 10\ny = 20\nprintln(\"The sum of x and y is \", x + y)\n```\n\nTo run this script, save it as `myscript.jl` and use the command:\n\n```bash\njulia myscript.jl\n```\n\nThe output will look like this:\n\n```julia\nHello, World!\nThe sum of x and y is 30\n```\n\n### Running Scripts with Arguments\n\nYou can also pass command-line arguments to a Julia script. For example, let's modify the script to accept arguments:\n\n```julia\n# args_example.jl\nprintln(\"Arguments passed to the script: \", ARGS)\n```\n\nNow, when running the script, you can pass arguments like this:\n\n```bash\njulia args_example.jl arg1 arg2 arg3\n```\n\nThe output will be:\n\n```julia\nArguments passed to the script: [\"arg1\", \"arg2\", \"arg3\"]\n```\n\nYou can access the arguments as elements of the `ARGS` array within your script.\n\n### Running Julia Scripts from the REPL\n\nYou can also run Julia scripts directly from the REPL by using the `include()` function. To run the `myscript.jl` script, for example:\n\n```julia\ninclude(\"myscript.jl\")\n```\n\nThis command will execute the code in the script, and youâ€™ll see the output in the REPL.\n\n### Running Julia Scripts in IDEs\n\nIf youâ€™re using an IDE like VS Code with the Julia extension, you can run the script directly from within the editor by pressing the \"Run\" button or using the appropriate keyboard shortcut. This is convenient for testing and iterating on your code without having to switch back and forth between the editor and the terminal. See the [Running Code](https://www.julia-vscode.org/docs/stable/userguide/runningcode/) page from Julia in VS Code documentation for more details.\n\n<img width=\"100%\" src=\"../assets/images/myscript.png\"/>\n\n## Editors and Ides\n\nWhile any text editor can be used to write Julia code, Integrated Development Environments (IDEs) significantly enhance the programming experience. Notable options for Julia include Visual Studio Code (VS Code), Jupyter, Pluto.jl, Vim, and Emacs. Each of these editors offers unique features like interactive environments, real-time code feedback, and specialized plugins for a smoother development process. For instance, VS Code with the Julia extension is the most feature-rich IDE for Julia, while Jupyter provides an interactive notebook environment. Pluto.jl focuses on reactive notebooks, and Vim and Emacs offer efficient, customizable text editing solutions.\n\nThe best IDE for Julia is [Visual Studio Code](https://code.visualstudio.com/), or VS Code, developed by Microsoft.\nIndeed, the [Julia VS Code extension](https://www.julia-vscode.org/) is the most feature-rich of all Julia IDE plugins.\nYou can download it from the VS Code Marketplace and read its [documentation](https://www.julia-vscode.org/docs/stable/).\n\n::: {.callout-tip}\nTo use Julia in Visual Studio Code, please follow these [steps](https://code.visualstudio.com/docs/languages/julia), where you can find \nhow to install Julia, VS Code and the necessary extensions.\n\nTo gain time, you can learn the keyboard shortcuts for:\n\n- [Windows](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf),\n- [macOS](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf),\n- [Linux](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf).\n:::\n\n::: {.panel-tabset}\n### VS Code\n\n<a href=\"https://www.julia-vscode.org/\" target=\"_blank\">\n  <img src=\"../assets/images/vscode.png\" height=\"85\" width=\"85\" alt=\"VSCode Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n</a>\n\nJulia for Visual Studio Code is a powerful, free IDE for the Julia language. Visual Studio Code is a powerful and customizable editor. With a completely live environment, Julia for VS Code aims to take the frustration and guesswork out of programming and put the fun back in.  We build on Juliaâ€™s unique combination of ease-of-use and performance. Beginners and experts can build better software more quickly, and get to a result faster. Julia is an officially supported language on the VS Code documentation.\n\n### Jupyter\n\n<a href=\"https://jupyter.org\" target=\"_blank\">\n  <img src=\"../assets/images/logo-jupyter.svg\" height=\"85\" width=\"85\" alt=\"Jupyter Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n</a>\n\nYou can write Jupyter notebooks and use the [Jupyter](https://jupyter.org) interactive environment. To do so you need to install\nthe [IJulia.jl](https://github.com/JuliaLang/IJulia.jl) package. IJulia is a [Julia-language](http://julialang.org/) backend\ncombined with the [Jupyter](http://jupyter.org/) interactive environment (also used by [IPython](http://ipython.org/)).  This \ncombination allows you to interact with the Julia language using Jupyter/IPython's powerful \n[graphical notebook](http://ipython.org/notebook.html), which combines code, formatted text, math, and multimedia in a single \ndocument. IJulia is a Jupyter language kernel and works with a variety of notebook user interfaces. In addition to the classic \nJupyter Notebook, IJulia also works with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), a Jupyter-based\nintegrated development environment for notebooks and code. The [nteract notebook desktop](https://nteract.io/) supports IJulia with \ndetailed instructions for its [installation with nteract](https://nteract.io/kernels/julia). Please visit this \n[webpage](https://www.jousefmurad.com/coding/install-julia-jupyter-notebook/) to get a tutorial on how to use Julia in \nJupyter notebook.\n\n### Pluto.jl\n\n<a href=\"https://plutojl.org/\" target=\"_blank\">\n  <img src=\"../assets/images/pluto_jl.svg\" height=\"85\" width=\"85\" alt=\"Pluto.jl Logo\">\n</a>\n<a class=\"link extra-link\" href=\"https://plutojl.org/\" target=\"_blank\">Simple reactive notebooks</a>\n\n### Vim\n\n<a href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">\n  <img src=\"../assets/images/vim.png\" height=\"85\" width=\"85\" alt=\"Vim Logo\" style=\"margin: 0px 1em 0em auto;\">\n</a>\n<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">Vim plugin</a>\n\n### Emacs\n\n<a href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">\n  <img src=\"../assets/images/emacs.png\" height=\"85\" width=\"85\" alt=\"Emacs Logo\" style=\"margin: 0px 1em 0em auto;\">\n</a>\n<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">Emacs plugin</a>\n\n::: \n\n## Julia Documentation\n\nOne of the key strengths of Julia is its comprehensive and easy-to-navigate documentation. Juliaâ€™s official documentation provides detailed explanations of the language features, standard libraries, and tools available for developers.\n\n### Official Documentation\n\nThe official Julia documentation is a complete reference guide for the language. You can find it here:\n\n- [Julia Documentation Website](https://docs.julialang.org)\n\nThis documentation covers everything from basic syntax to advanced topics like parallel computing and package management.\n\n**Example.** Search how to compute the norm of a vector.\n\n<img width=\"100%\" src=\"images/doc-norm-1.png\"/>\n\nThe `norm` function comes from the standard librairy `LinearAlgebra`.\n\n<img width=\"100%\" src=\"images/doc-norm-2.png\"/>\n\nHowever, we are not directly at the right place, so I recommend to use the `Search docs` field.\n\n<img width=\"100%\" src=\"images/doc-norm-3.png\"/>\n\nAnd now, we have the documentation.\n\n<img width=\"100%\" src=\"images/doc-norm-4.png\"/>\n\n::: {.callout-note}\nYou can also access the Julia documentation directly from the Julia REPL using the `?` (help) command.\n:::\n\n### Accessing Help in the REPL\n\nThe REPL provides a built-in help system that can assist you in looking up functions, types, and more. Hereâ€™s how you can use it:\n\n1. **Look up a function or keyword**: Type `?` followed by the function name or keyword you want help with.\n   \n   ```julia\n   ?println\n   ```\n\n   This will display the documentation for the `println` function.\n\n2. **Search for a keyword**: You can also type just `?` followed by a search term to find relevant functions or types in the documentation.\n   \n   ```julia\n   ?array\n   ```\n\n   This will display documentation related to arrays in Julia.\n\n### Additional Resources\n\n- **Julia Language GitHub**: [Julia GitHub Repository](https://github.com/JuliaLang/julia) â€” Contains the source code and development discussion.\n- **Julia Discourse**: [Julia Discourse Forum](https://discourse.julialang.org) â€” A community forum where you can ask questions, share ideas, and discuss Julia-related topics.\n- **JuliaLang Slack**: [Join Slack Community](https://julialang.slack.com/join/shared_invite/zt-2tyfzahid-QwVkpO13UA~9hyffV7UYMg#/shared-invite/email) â€” An official Slack workspace for the Julia community.\n- **Julia Community**: [Julia Community](https://julialang.org/community/) â€” A hub for Julia community resources, including events, blogs, and videos.\n\n## Working with Julia Packages\n\nJulia has a rich ecosystem of packages that extend the languageâ€™s capabilities for various domains, such as machine learning, data science, optimization, and more. The [Julia Packages](https://juliapackages.com) webpage is the official source for Julia packages. This section will cover how to manage and use packages in Julia.\n\n### Standard Libraries in Julia\n\nJulia comes with a set of [standard libraries](https://docs.julialang.org/en/v1/), which are built-in packages available with the installation. These libraries cover a wide range of functionality, from mathematical operations to file handling and system utilities. You do not need to install them separately; they are ready to be used as soon as you start Julia.\n\nOne commonly used standard library is [`LinearAlgebra`](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/), which provides tools for linear algebra, such as matrix factorizations and vector operations.\n\n#### Example: Computing the Norm of a Vector\n\nThe `LinearAlgebra` library can be used to compute the norm of a vector. Here's how you can do that:\n\n::: {#6107c491 .cell execution_count=4}\n``` {.julia .cell-code}\nusing LinearAlgebra\n\n# Define a vector\nv = [3, 4]\n\n# Compute the Euclidean norm (magnitude) of the vector\nnorm_v = norm(v)\n\nprintln(\"The norm of the vector is: \", norm_v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe norm of the vector is: 5.0\n```\n:::\n:::\n\n\nIn this example, the `norm()` function calculates the Euclidean norm (or 2-norm) of the vector `v`, which in this case is \n\n$$\n\\sqrt{3^2 + 4^2} = 5.\n$$\n\nThese standard libraries help you to get started quickly with common tasks, without the need to install additional packages.\n\n### Installing Packages\n\nTo install a package, you can use the `Pkg` module, which is part of Julia's standard library. Here's how to install a package:\n\n1. Enter the package manager mode by typing `]` in the REPL.\n2. Then, use the `add` command to install a package.\n\nExample:\n\n```julia\n] add DataFrames\n```\n\nThis will install the `DataFrames` package, which is widely used for data manipulation in Julia. To get the list of installed packages, type:\n\n```julia\n] status\n```\n\n::: {.callout-note}\nYou can also install the package directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.add(\"DataFrames\")\n```\n:::\n\n### Using Installed Packages\n\nOnce a package is installed, you can use it by importing it into your code using the `using` keyword. This makes the functions and types of the package available for use.\n\nExample:\n\n::: {#fe158e82 .cell execution_count=5}\n``` {.julia .cell-code}\nusing DataFrames\n\ndf = DataFrame(A = 1:4, B = [\"a\", \"b\", \"c\", \"d\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><div style = \"float: left;\"><span>4Ã—2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">A</th><th style = \"text-align: left;\">B</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">a</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">b</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">c</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">d</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThis creates a simple `DataFrame` object with two columns `A` and `B`.\n\n### Updating Packages\n\nTo update the packages installed in your environment to their latest versions, use the `update` command in the package manager.\n\nExample:\n\n```julia\n] update\n```\n\nYou can also update a specific package by running:\n\n```julia\n] update PackageName\n```\n\n::: {.callout-note}\nYou can also update packages directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.update()\n# or\nPkg.update(\"PackageName\")\n```\n:::\n\n### Removing Packages\n\nIf you no longer need a package, you can remove it using the `rm` command.\n\nExample:\n\n```julia\n] rm DataFrames\n```\n\nThis will uninstall the `DataFrames` package from your environment.\n\n::: {.callout-note}\nYou can also remove packages directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.rm(\"DataFrames\")\n```\n:::\n\n### Package Environments\n\nIn Julia, you can manage different environments, each with its own set of installed packages. This allows you to work on multiple projects with different dependencies without conflicts. You can create a new environment by navigating to a directory and typing:\n\n```julia\n] activate .\n```\n\nThis will activate the environment in the current directory. You can also specify a different directory or environment path by providing it after `activate`. If you want\nto come back to the global environment, type:\n\n```julia\n] activate\n```\n\nNote that the packages installed in the global environment are visible from any other environment. See the [Working with Environments](https://pkgdocs.julialang.org/v1/environments/) page for more details.\n\n::: {.callout-note}\nYou can also activate environments directly from the Julia mode. For instance, for the current directory:\n\n```julia\nusing Pkg\nPkg.activate(\".\")\n```\n:::\n\n### Sneak peek behind the scenes\n\nIn practice, a **package** is a collection of organized code, which often includes one or more modules, along with additional resources like documentation and tests. Packages are designed to be reusable and shareable, enabling users to install and integrate them into different projects. \n\nA **module**, on the other hand, serves as a namespace that helps organize code into logical units while preventing naming conflicts. It isolates its contents from the global scope, ensuring a clean and structured codebase. But these are concepts we will go deeper into later in this lecture.\n\n```julia\nmodule MyModule\nexport my_function\n\nfunction my_function(x)\n    return x + 1\nend\nend\n```\n\nWithin a package, modules are accessed using the `using` keyword, allowing you to leverage the functionality provided by the module in your own code.\n\n### Conclusion\n\nWorking with packages is essential to leveraging Juliaâ€™s powerful ecosystem. Understanding how to install, update, and remove packages, as well as using environments to manage project-specific dependencies, will help you make the most out of Julia's vast libraries.\n\n## Julia Ecosystem\n\nThe Julia programming language has a rich ecosystem of tools, platforms, and communities that can help you develop, deploy, and scale your applications. This section will introduce some key components of the Julia ecosystem, including JuliaHub, JuliaSim, JuliaCon, and other important resources.\nThe Julia ecosystem is growing rapidly, offering a wide range of tools for scientific computing, data science, and application development. Platforms like JuliaHub, simulation tools like JuliaSim, and community events like JuliaCon are all central to the ecosystem and provide invaluable resources to Julia users.\n\n### JuliaHub\n\n[JuliaHub](https://juliahub.com/) is an online platform developed by Julia Computing that provides cloud-based access to Julia environments. It offers managed Julia instances, making it easier to share and deploy Julia-based projects without the need to worry about local setup. JuliaHub also supports collaboration on Julia projects and integrates with popular tools such as Jupyter notebooks.\n\nFeatures of JuliaHub include:\n\n- **Cloud-based Julia environments**: Run Julia code on the cloud without any installation.\n- **Package management**: Seamless integration with Juliaâ€™s package manager.\n- **Collaboration**: Share Julia code and data with colleagues and collaborators.\n- **Jupyter notebooks**: Use Jupyter notebooks hosted on JuliaHub for interactive computing.\n\n### JuliaSim\n\n[JuliaSim](https://juliahub.com/products/juliasim) is a collection of tools and libraries for modeling and simulation, built using Julia. It is designed for systems simulation in fields such as engineering, physics, and finance. JuliaSim offers several packages and tools to help you build and simulate complex models, as well as visualize and analyze the results.\n\nFeatures of JuliaSim include:\n\n- **Differential equation solving**: Tools like [DifferentialEquations.jl](https://diffeq.sciml.ai/) are used to solve complex systems of differential equations.\n- **Simulations in science and engineering**: Use JuliaSim to simulate and analyze physical, chemical, and biological systems.\n- **Fast performance**: The high-performance capabilities of Julia make JuliaSim ideal for computationally intensive simulations.\n\n### JuliaCon\n\n[JuliaCon](https://juliacon.org/) is the annual conference for the Julia community, where developers, researchers, and users come together to share the latest developments, discuss best practices, and showcase their Julia projects. JuliaCon features keynote speakers, tutorials, workshops, and talks on a wide range of topics related to Julia programming.\n\nKey features of JuliaCon:\n\n- **Workshops and tutorials**: Learn Julia directly from experts through hands-on workshops.\n- **Networking**: Meet fellow Julia users, contributors, and researchers to collaborate on projects and research.\n- **Talks and presentations**: Hear about cutting-edge developments in Julia from experts in various fields.\n\n<img class=\"do-not-accept-dark-mode centering\" width=\"80%\" src=\"images/juliacon-2023.jpg\" />\n\n",
    "supporting": [
      "getting_started_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}