{
  "hash": "7b685036e6ade1ef5776f66ed399225c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Developer set up\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nAs a beginner Julia developers, you have learned interactive coding within the REPL. The content of this page will help you level-up by explaining how to use scripts and Integrated Development Environments (IDEs). Scripts allow you to write and save code in files, making it easier to test, reuse, and share your work. This is essential for building real-world projects, where your code will often be longer and more complex. IDEs provide helpful tools like auto-completion, debugging, syntax highlighting, and version control integration, which improve productivity and help catch errors early (avoiding tedious debugging hours...). Using scripts and IDEs sets you up with good habits and gives you the structure needed to grow as a developer.\n\n## Running Julia Scripts\n\nWhile the Julia REPL is great for interactive experimentation, you’ll often want to write and run larger programs. This is where running Julia scripts comes in.\n\n### Creating a Julia Script\n\nA Julia script is a plain text file that contains Julia code. You can create a Julia script using any text editor, such as VS Code, Sublime Text, or even a simple text editor. \n\nSave the file with the `.jl` extension, for example `myscript.jl`.\n\n### Running a Julia Script\n\nTo run a Julia script, open your terminal or command prompt, navigate to the directory where the script is located, and then use the following command:\n\n```bash\njulia myscript.jl\n```\n\nThis will execute the code in `myscript.jl` and output any results in the terminal. If your script includes print statements, those outputs will be displayed. See the [command-line interface](https://docs.julialang.org/en/v1/manual/command-line-interface/) page for more details.\n\n### Example: Running a Script\n\nHere’s an example of a simple Julia script:\n\n```julia\n# myscript.jl\nprintln(\"Hello, World!\")\nx = 10\ny = 20\nprintln(\"The sum of x and y is \", x + y)\n```\n\nTo run this script, save it as `myscript.jl` and use the command:\n\n```bash\njulia myscript.jl\n```\n\nThe output will look like this:\n\n```julia\nHello, World!\nThe sum of x and y is 30\n```\n\n### Running Scripts with Arguments\n\nYou can also pass command-line arguments to a Julia script. For example, let's modify the script to accept arguments:\n\n```julia\n# args_example.jl\nprintln(\"Arguments passed to the script: \", ARGS)\n```\n\nNow, when running the script, you can pass arguments like this:\n\n```bash\njulia args_example.jl arg1 arg2 arg3\n```\n\nThe output will be:\n\n```julia\nArguments passed to the script: [\"arg1\", \"arg2\", \"arg3\"]\n```\n\nYou can access the arguments as elements of the `ARGS` array within your script.\n\n### Running Julia Scripts from the REPL\n\nYou can also run Julia scripts directly from the REPL by using the `include()` function. To run the `myscript.jl` script, for example:\n\n```julia\ninclude(\"myscript.jl\")\n```\n\nThis command will execute the code in the script, and you’ll see the output in the REPL.\n\n### Running Julia Scripts in IDEs\n\nIf you’re using an IDE like VS Code with the Julia extension, you can run the script directly from within the editor by pressing the \"Run\" button or using the appropriate keyboard shortcut. This is convenient for testing and iterating on your code without having to switch back and forth between the editor and the terminal. See the [Running Code](https://www.julia-vscode.org/docs/stable/userguide/runningcode/) page from Julia in VS Code documentation for more details.\n\n<img width=\"100%\" src=\"../assets/images/myscript.png\"/>\n\n::: {.callout-tip}\nWe strongly encourage you configure VS Code for Julia. This set up will be handy for the exercises in the rest of this lecture. Read why in the next section.\n:::\n\n## Editors and Ides\n\nWhile any text editor can be used to write Julia code, Integrated Development Environments (IDEs) significantly enhance the programming experience. Notable options for Julia include Visual Studio Code (VS Code), Jupyter, Pluto.jl, Vim, and Emacs. Each of these editors offers unique features like interactive environments, real-time code feedback, and specialized plugins for a smoother development process. For instance, VS Code with the Julia extension is the most feature-rich IDE for Julia, while Jupyter provides an interactive notebook environment. Pluto.jl focuses on reactive notebooks, and Vim and Emacs offer efficient, customizable text editing solutions.\n\nThe best IDE for Julia is [Visual Studio Code](https://code.visualstudio.com/), or VS Code, developed by Microsoft.\nIndeed, the [Julia VS Code extension](https://www.julia-vscode.org/) is the most feature-rich of all Julia IDE plugins.\nYou can download it from the VS Code Marketplace and read its [documentation](https://www.julia-vscode.org/docs/stable/).\n\n::: {.callout-tip}\nTo use Julia in Visual Studio Code, please follow these [steps](https://code.visualstudio.com/docs/languages/julia), where you can find \nhow to install Julia, VS Code and the necessary extensions.\n\nTo gain time, you can learn the keyboard shortcuts for:\n\n- [Windows](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf),\n- [macOS](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf),\n- [Linux](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf).\n:::\n\n::: {.panel-tabset}\n### VS Code\n\n<a href=\"https://www.julia-vscode.org/\" target=\"_blank\">\n  <img src=\"../assets/images/vscode.png\" height=\"85\" width=\"85\" alt=\"VSCode Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n</a>\n\nJulia for Visual Studio Code is a powerful, free IDE for the Julia language. Visual Studio Code is a powerful and customizable editor. With a completely live environment, Julia for VS Code aims to take the frustration and guesswork out of programming and put the fun back in.  We build on Julia’s unique combination of ease-of-use and performance. Beginners and experts can build better software more quickly, and get to a result faster. Julia is an officially supported language on the VS Code documentation.\n\n### Jupyter\n\n<a href=\"https://jupyter.org\" target=\"_blank\">\n  <img src=\"../assets/images/logo-jupyter.svg\" height=\"85\" width=\"85\" alt=\"Jupyter Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n</a>\n\nYou can write Jupyter notebooks and use the [Jupyter](https://jupyter.org) interactive environment. To do so you need to install\nthe [IJulia.jl](https://github.com/JuliaLang/IJulia.jl) package. IJulia is a [Julia-language](http://julialang.org/) backend\ncombined with the [Jupyter](http://jupyter.org/) interactive environment (also used by [IPython](http://ipython.org/)).  This \ncombination allows you to interact with the Julia language using Jupyter/IPython's powerful \n[graphical notebook](http://ipython.org/notebook.html), which combines code, formatted text, math, and multimedia in a single \ndocument. IJulia is a Jupyter language kernel and works with a variety of notebook user interfaces. In addition to the classic \nJupyter Notebook, IJulia also works with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), a Jupyter-based\nintegrated development environment for notebooks and code. The [nteract notebook desktop](https://nteract.io/) supports IJulia with \ndetailed instructions for its [installation with nteract](https://nteract.io/kernels/julia). Please visit this \n[webpage](https://www.jousefmurad.com/coding/install-julia-jupyter-notebook/) to get a tutorial on how to use Julia in \nJupyter notebook.\n\n### Pluto.jl\n\n<a href=\"https://plutojl.org/\" target=\"_blank\">\n  <img src=\"../assets/images/pluto_jl.svg\" height=\"85\" width=\"85\" alt=\"Pluto.jl Logo\">\n</a>\n<a class=\"link extra-link\" href=\"https://plutojl.org/\" target=\"_blank\">Simple reactive notebooks</a>\n\n### Vim\n\n<a href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">\n  <img src=\"../assets/images/vim.png\" height=\"85\" width=\"85\" alt=\"Vim Logo\" style=\"margin: 0px 1em 0em auto;\">\n</a>\n<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">Vim plugin</a>\n\n### Emacs\n\n<a href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">\n  <img src=\"../assets/images/emacs.png\" height=\"85\" width=\"85\" alt=\"Emacs Logo\" style=\"margin: 0px 1em 0em auto;\">\n</a>\n<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">Emacs plugin</a>\n\n::: \n\n## Working with Julia Packages\n\nJulia has a rich ecosystem of packages that extend the language’s capabilities for various domains, such as machine learning, data science, optimization, and more. The [Julia Packages](https://juliapackages.com) webpage is the official source for Julia packages. This section will cover how to manage and use packages in Julia.\n\n### Standard Libraries in Julia\n\nJulia comes with a set of [standard libraries](https://docs.julialang.org/en/v1/), which are built-in packages available with the installation. These libraries cover a wide range of functionality, from mathematical operations to file handling and system utilities. You do not need to install them separately; they are ready to be used as soon as you start Julia.\n\nOne commonly used standard library is [`LinearAlgebra`](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/), which provides tools for linear algebra, such as matrix factorizations and vector operations.\n\n#### Example: Computing the Norm of a Vector\n\nThe `LinearAlgebra` library can be used to compute the norm of a vector. Here's how you can do that:\n\n::: {#9b862090 .cell execution_count=2}\n``` {.julia .cell-code}\nusing LinearAlgebra\n\n# Define a vector\nv = [3, 4]\n\n# Compute the Euclidean norm (magnitude) of the vector\nnorm_v = norm(v)\n\nprintln(\"The norm of the vector is: \", norm_v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe norm of the vector is: 5.0\n```\n:::\n:::\n\n\nIn this example, the `norm()` function calculates the Euclidean norm (or 2-norm) of the vector `v`, which in this case is \n\n$$\n\\sqrt{3^2 + 4^2} = 5.\n$$\n\nThese standard libraries help you to get started quickly with common tasks, without the need to install additional packages.\n\n### Installing Packages\n\nTo install a package, you can use the `Pkg` module, which is part of Julia's standard library. Here's how to install a package:\n\n1. Enter the package manager mode by typing `]` in the REPL.\n2. Then, use the `add` command to install a package.\n\nExample:\n\n```julia\n] add DataFrames\n```\n\nThis will install the `DataFrames` package, which is widely used for data manipulation in Julia. To get the list of installed packages, type:\n\n```julia\n] status\n```\n\n::: {.callout-note}\nYou can also install the package directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.add(\"DataFrames\")\n```\n:::\n\n### Using Installed Packages\n\nOnce a package is installed, you can use it by importing it into your code using the `using` keyword. This makes the functions and types of the package available for use.\n\nExample:\n\n::: {#f0c7b388 .cell execution_count=3}\n``` {.julia .cell-code}\nusing DataFrames\n\ndf = DataFrame(A = 1:4, B = [\"a\", \"b\", \"c\", \"d\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><div style = \"float: left;\"><span>4×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">A</th><th style = \"text-align: left;\">B</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">a</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">b</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">c</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">d</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThis creates a simple `DataFrame` object with two columns `A` and `B`.\n\n### Updating Packages\n\nTo update the packages installed in your environment to their latest versions, use the `update` command in the package manager.\n\nExample:\n\n```julia\n] update\n```\n\nYou can also update a specific package by running:\n\n```julia\n] update PackageName\n```\n\n::: {.callout-note}\nYou can also update packages directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.update()\n# or\nPkg.update(\"PackageName\")\n```\n:::\n\n### Removing Packages\n\nIf you no longer need a package, you can remove it using the `rm` command.\n\nExample:\n\n```julia\n] rm DataFrames\n```\n\nThis will uninstall the `DataFrames` package from your environment.\n\n::: {.callout-note}\nYou can also remove packages directly from the Julia mode:\n\n```julia\nusing Pkg\nPkg.rm(\"DataFrames\")\n```\n:::\n\n### Package Environments\n\nIn Julia, you can manage different environments, each with its own set of installed packages. This allows you to work on multiple projects with different dependencies without conflicts. You can create a new environment by navigating to a directory and typing:\n\n```julia\n] activate .\n```\n\nThis will activate the environment in the current directory. You can also specify a different directory or environment path by providing it after `activate`. If you want\nto come back to the global environment, type:\n\n```julia\n] activate\n```\n\nNote that the packages installed in the global environment are visible from any other environment. See the [Working with Environments](https://pkgdocs.julialang.org/v1/environments/) page for more details.\n\n::: {.callout-note}\nYou can also activate environments directly from the Julia mode. For instance, for the current directory:\n\n```julia\nusing Pkg\nPkg.activate(\".\")\n```\n:::\n\n### Conclusion\n\nWorking with packages is essential to leveraging Julia’s powerful ecosystem. Understanding how to install, update, and remove packages, as well as using environments to manage project-specific dependencies, will help you make the most out of Julia's vast libraries.\n\n## Exercise\n\nLet us put these concepts into practice to prepare your **work environment** for the exercises in this lecture.\n\n1. Navigate to your working directory dedicated to this lecture through a terminal or command prompt.\n\n2. Start Julia inside the directory using `julia`.\n\n3. Enter the package manager mode by typing `]` in the REPL.\n\n4. Activate the environment associated to this directory by typing `activate .`\n\n5. Add `Plots`, `DataFrames` and `CSV` packages to the environment using `add`.\n\n6. Check installation of packages using the `status` command. \n\n7. In your work directory, a Project.toml and Manifest.toml file are created and packages are installed locally.\n\n::: {.callout-warning}\nRecall to activate this environment at the start of each work session for this lecture.\n:::\n\n",
    "supporting": [
      "developer_setup_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}