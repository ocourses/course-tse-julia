{
  "hash": "ae5affa88654aa8733ccb9c9fa4e9b13",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Structure your code\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nNow, you got familiar with the basic syntax of Julia — the foundation for writing simple scripts. However, as programs grow in size and complexity, writing code in a flat, linear way becomes difficult to manage, debug, and reuse. This is why in this page you will learn to move from basic syntax to **structured code**. Introducing **functions** allows you to break the code into reusable, logical blocks, making it easier to read, test, and maintain. Incorporating **error handling** ensures your program can manage unexpected situations gracefully instead of crashing, which is crucial for reliability. Finally, using **modules** helps organize code across multiple files, encourages reusability, and separates concerns—for example, keeping database code apart from user interface code. Together, these practices lead to cleaner, more robust, and scalable programs, which is the goal of any serious software development effort.\n\n## Functions\n\nJulia offers flexible ways to define [functions](https://docs.julialang.org/en/v1/manual/functions/), with options for positional arguments, keyword arguments, optional arguments with default values, and variable-length arguments. Let’s explore each of these in detail.\n\n### Defining Functions\n\nFunctions in Julia can be defined using either the `function` keyword or the assignment syntax.\n\n::: {#a094262b .cell execution_count=2}\n``` {.julia .cell-code}\n# Using the `function` keyword\nfunction add(a, b)\n    return a + b\nend\n\n# Using assignment syntax\nmultiply(a, b) = a * b\n\n@myshow begin #| hide\nadd(2, 3)\nmultiply(2, 3)\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> add(2, 3) = 5\njulia> multiply(2, 3) = 6\n```\n:::\n:::\n\n\n::: {.callout-warning}\nThe function `add` has been defined without any specification on the kind of data which is accepted. We expect, however, the `+` operator not to make sense for any combination of data. `5+2` looks reasonable while `2+\"hello\"` seems confusing. If, for example, you wish to use `add` only for integers (let say of the `Int64` kind), you would annotate the function in the following way: `function add(a::Int64, b::Int64)`.\n\nIf you wish `add` to take integers or real numbers, you should use the kind of data referred as `Union` to annote the arguments. It is created by specifying a list of data kinds within `Union{}`, here `Union{Int64, Float64}`. \n:::\n\n### Positional and Keyword Arguments\n\nIn Julia, functions can take both positional arguments and keyword arguments.\n\n- **Positional Arguments**: These are listed first in the parameter list and must be provided in the correct order when the function is called. Positional arguments can have default values, but it's not required.\n\n- **Keyword Arguments**: Keyword arguments are specified after a semicolon (`;`) in the parameter list. These arguments must be provided by name when calling the function. Like positional arguments, keyword arguments can have default values, but they don’t have to.\n\n::: {#0b71e89d .cell execution_count=3}\n``` {.julia .cell-code}\nfunction greet(name; punctuation = \"!\")\n    return \"Hello, \" * name * punctuation\nend\n\nprintln(greet(\"Alice\"))\nprintln(greet(\"Alice\", punctuation = \"?\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\nHello, Alice?\n```\n:::\n:::\n\n\nIn this example, `punctuation` is a keyword argument with a default value of `\"!\"`. You could also define a keyword argument without a default value if needed.\n\n\n::: {.callout-note}\nIn Julia, when you define a function with multiple positional arguments, those arguments are actually packed into a tuple when you call the function. This kind of data is reffered to as `Tuple`. \n\nKeyword arguments are different from positional arguments because they are explicitly named when the function is called. Keyword arguments are passed as a kind of data reffered to as `NamedTuple`. It is a special kind of tuple where each element is paired with a name (as the key) and a corresponding value.\n:::\n\n### Variable Number of Arguments\nJulia functions can accept an arbitrary number of arguments using the splatting operator `...`. These arguments are gathered into a tuple.\n\n::: {#59da7c42 .cell execution_count=4}\n``` {.julia .cell-code}\nfunction sum_all(args...)\n    total = 0\n    for x in args\n        total += x\n    end\n    return total\nend\n\n@myshow begin #| hide\nsum_all(1, 2, 3, 4)\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> sum_all(1, 2, 3, 4) = 10\n```\n:::\n:::\n\n\n### Default Values for Optional Arguments\nIn Julia, you can assign default values to both positional and keyword arguments. When the function is called without specifying a value for an argument with a default, the default value is used.\n\n::: {#f8af91b6 .cell execution_count=5}\n``` {.julia .cell-code}\nfunction power(base, exponent=2)\n    return base ^ exponent\nend\n\n@myshow begin #| hide\npower(3)      # Outputs: 9 (since exponent defaults to 2)\npower(3, 3)   # Outputs: 27\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> power(3) = 9\njulia> power(3, 3) = 27\n```\n:::\n:::\n\n\n### Multiple Optional Positional Arguments\n\nWhen a function has multiple optional positional arguments, Julia will use the default values for any arguments not provided, allowing flexible combinations.\n\n::: {#b9d3bb66 .cell execution_count=6}\n``` {.julia .cell-code}\nfunction calculate(a=1, b=2, c=3)\n    return a + b * c\nend\n\n@myshow begin #| hide\ncalculate()        # Outputs: 7  (1 + 2 * 3)\ncalculate(5)       # Outputs: 11 (5 + 2 * 3)\ncalculate(5, 4)    # Outputs: 17 (5 + 4 * 3)\ncalculate(5, 4, 1) # Outputs: 9  (5 + 4 * 1)\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> calculate() = 7\njulia> calculate(5) = 11\njulia> calculate(5, 4) = 17\njulia> calculate(5, 4, 1) = 9\n```\n:::\n:::\n\n\nHere’s how the argument combinations work:\n\n1. `calculate()` uses all default values: `a=1`, `b=2`, `c=3`.\n2. `calculate(5)` overrides `a`, leaving `b` and `c` as defaults.\n3. `calculate(5, 4)` overrides `a` and `b`, leaving `c` as the default.\n4. `calculate(5, 4, 1)` overrides all arguments. \n\nThis flexibility makes it easy to call functions with varying levels of detail without explicitly specifying each parameter.\n\n::: {.callout-tip}\nIf a function has many optional arguments, consider using keyword arguments to improve readability and avoid confusion about the order of arguments.\n:::\n\n### Mutation and the Bang `!` Convention\nIn Julia, functions that modify or mutate their arguments typically end with a `!`, following the [\"bang\" convention](https://docs.julialang.org/en/v1/manual/style-guide/#bang-convention). This is not enforced by the language but is a widely followed convention in Julia to indicate mutation.\n\n::: {#495b34db .cell execution_count=7}\n``` {.julia .cell-code}\nfunction add_one!(array)\n    for i in eachindex(array)\n        array[i] += 1\n    end\nend\n\n@myshow begin #| hide\narr = [1, 2, 3]\nadd_one!(arr)\narr  # Outputs: [2, 3, 4]\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> arr = [1, 2, 3]\njulia> add_one!(arr) = nothing\njulia> arr = [2, 3, 4]\n```\n:::\n:::\n\n\nIn this example, `add_one!` modifies the elements of the array `arr`. By convention, the `!` at the end of the function name indicates that the function mutates its input.\n\n### Broadcasting\n\nJulia supports **broadcasting**, a powerful feature that applies a function element-wise to arrays or other collections. Broadcasting is denoted by a `.` placed before the function call or operator.\n\n::: {#194a860f .cell execution_count=8}\n``` {.julia .cell-code}\n# Define a simple function\nfunction square(x)\n    return x^2\nend\n\n# Apply the function to a vector using broadcasting\nvec = [1, 2, 3, 4]\nsquared_vec = square.(vec)\n\nprintln(\"Original vector: \", vec)\nprintln(\"Squared vector: \", squared_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal vector: [1, 2, 3, 4]\nSquared vector: [1, 4, 9, 16]\n```\n:::\n:::\n\n\nIn this example:\n\n- The function `square(x)` is applied to each element of `vec` using the `.` operator.\n- Broadcasting works seamlessly with both built-in and user-defined functions, making it easy to perform element-wise operations on arrays of any shape.\n\n### Return Values\nIn Julia, functions automatically return the last evaluated expression. However, you can use the `return` keyword to explicitly specify the output if needed.\n\n```julia\nfunction multiply(a, b)\n    a * b  # Returns the result of a * b\nend\n```\n\nIn the special case where a function does not return any data, the default return value in Julia is a kind of data called `Nothing`. It’s similar to `void` in languages like C or Java.\n\n## Errors and Exception Handling\n\nJulia provides a powerful framework for managing and [handling errors](https://docs.julialang.org/en/v1/manual/control-flow/#Exception-Handling), which helps in writing robust programs. Error handling in Julia involves various built-in error types and mechanisms, including `throw` for raising errors and `try`/`catch` blocks for handling exceptions.\n\n### Common Error Types in Julia\n\nJulia has several built-in error types that are commonly used:\n\n- **`ArgumentError`**: Raised when a function receives an argument that is inappropriate or out of expected range.\n- **`BoundsError`**: Occurs when trying to access an index that is out of bounds for an array or collection.\n- **`DivideError`**: Raised when division by zero is attempted.\n- **`DomainError`**: Raised when a mathematical function is called with an argument outside its domain. For instance, taking the square root of a negative number.\n- **`MethodError`**: Occurs when a method is called with incorrect arguments or types.\n\n### Raising Errors with `throw`\n\nIn Julia, you can explicitly raise an error using the `throw` function. This is useful for defining custom error conditions in your code. To throw an error, call `throw` with an instance of an error type:\n\n::: {#d53f8189 .cell execution_count=9}\n``` {.julia .cell-code}\nfunction divide(a, b)\n    if b == 0\n        throw(DivideError())\n    end\n    return a / b\nend\n\ndivide(10, 0)  # Will raise a DivideError\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>DivideError: integer division error\n\nStacktrace:\n [1] <span class=\"ansi-bold\">divide</span><span class=\"ansi-bold\">(</span><span class=\"ansi-bright-black-fg\">a</span>::Int64, <span class=\"ansi-bright-black-fg\">b</span>::Int64<span class=\"ansi-bold\">)</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span class=\"ansi-bright-black-fg\">./</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[10]:3</span>\n [2] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[10]:8</span></pre>\n```\n:::\n\n:::\n:::\n\n\nIn this example, the function `divide` will throw a `DivideError` if the second argument `b` is zero, making the function safer and more robust.\n\n### Handling Errors with `try`/`catch`\n\nJulia provides `try`/`catch` blocks for managing exceptions gracefully. Code within a `try` block runs until an error is encountered. If an error is thrown, control passes to the `catch` block, where you can handle the error.\n\nHere’s an example of using `try`/`catch` with the `divide` function:\n\n::: {#e2f6f3cb .cell execution_count=10}\n``` {.julia .cell-code}\ntry\n    println(divide(10, 0))  # Will raise an error\ncatch e\n    println(\"Error: \", e)  # Handles the error\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError: DivideError()\n```\n:::\n:::\n\n\nIn this example:\n\n- If `divide(10, 0)` raises an error, the program catches it and prints a custom message instead of stopping execution.\n- The variable `e` holds the error, which can be printed or used for further handling.\n\n### Using `finally` for Cleanup\n\nIn Julia, `finally` is a block used in conjunction with `try` and `catch` to ensure that certain cleanup actions are executed regardless of whether an error occurs or not. This is useful for tasks like closing files, releasing resources, or resetting variables that need to be done after the execution of a `try-catch` block.\n\nThe code inside the `finally` block is always executed, even if an exception is thrown and caught. This makes it ideal for situations where you need to guarantee that some actions occur after the main code runs, like resource deallocation.\n\n#### Syntax:\n\n::: {#8399d372 .cell execution_count=11}\n``` {.julia .cell-code}\ntry\n    # Code that might throw an error\ncatch exception\n    # Code to handle the error\nfinally\n    # Cleanup code that will always run\nend\n```\n:::\n\n\n#### Example:\n\n::: {#b0087c21 .cell execution_count=12}\n``` {.julia .cell-code}\nfunction safe_file_read(filename::String)\n    file = nothing\n    try\n        file = open(filename, \"r\")\n        data = read(file, String)\n        return data\n    catch e\n        println(\"An error occurred: \", e)\n    finally\n        if file !== nothing\n            close(file)\n            println(\"File closed.\")\n        end\n    end\nend\n\n# Test with a valid file\nprintln(safe_file_read(\"example.txt\"))\n\n# Test with an invalid file\nprintln(safe_file_read(\"nonexistent.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn error occurred: SystemError(\"opening file \\\"example.txt\\\"\", 2, nothing)\nnothing\nAn error occurred: SystemError(\"opening file \\\"nonexistent.txt\\\"\", 2, nothing)\nnothing\n```\n:::\n:::\n\n\n#### Explanation:\n- The `finally` block ensures that the file is always closed after reading, even if an error occurs (e.g., file not found, read error).\n- If the `open` operation is successful, the `finally` block will still execute and close the file, ensuring proper resource management.\n- If an exception is thrown in the `try` block (like a non-existent file), it will be caught and handled by the `catch` block, but the `finally` block will still execute to close the file (if opened).\n\n#### Use Cases for `finally`:\n- Closing files or network connections.\n- Releasing resources (e.g., database connections, locks).\n- Resetting the program state to a known clean state.\n\n## Scoping and Closure\n\nIn Julia, [scoping rules](https://docs.julialang.org/en/v1/manual/variables-and-scoping/) determine the visibility and lifetime of variables. Understanding scope and closures is essential for writing efficient and error-free code.\n\n### Variable Scope\nScope in Julia refers to the region of code where a variable is accessible. There are two primary scopes: global and local.\n\n- **Global Scope**: Variables defined at the top level of a module or script are in the global scope and can be accessed from anywhere in that file. However, modifying global variables from within functions is generally discouraged.\n\n::: {#e86d80f9 .cell execution_count=13}\n``` {.julia .cell-code}\nglobal_var = 10\n\nfunction access_global()\n    return global_var\nend\n\n@myshow begin #| hide\naccess_global()  # Outputs: 10\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> access_global() = 10\n```\n:::\n:::\n\n\n- **Local Scope**: Variables defined within a function or a block (e.g., loops or conditionals) have local scope and cannot be accessed outside of that block.\n\n::: {#e5621982 .cell execution_count=14}\n``` {.julia .cell-code}\nfunction local_scope_example()\n    local_var = 5\n    return local_var\nend\n\n@myshow begin #| hide\nlocal_scope_example()\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> local_scope_example() = 5\n```\n:::\n:::\n\n\nIf you try to access `local_var` outside the function, you will get an error because it is not defined in the global scope.\n\n::: {#aed3d11b .cell execution_count=15}\n``` {.julia .cell-code}\nlocal_var  # This would cause an error, as local_var is not accessible here\nnothing #|  hide\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `local_var` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\nUndefVarError: `local_var` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n```\n:::\n:::\n\n\n### Scope of Variables in `for` Loops\n\nIn Julia, a `for` loop *does* create a new local scope for its loop variable when inside a function or another local scope. This means that a variable used as the loop variable will not overwrite an existing global variable with the same name in that context.\n\nHere's an example:\n\n::: {#e8350f04 .cell execution_count=16}\n``` {.julia .cell-code}\ni = 10  # Define a global variable `i`\n\nfor i = 1:3\n    println(i)  # Prints 1, 2, and 3\nend\n\nprintln(\"Outside loop: i = \", i)  # Outputs: 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\nOutside loop: i = 10\n```\n:::\n:::\n\n\nIn this case, the initial value of `i` (10) is not affected by the loop because the `for` loop has its own local scope for `i`. After the loop completes, the global variable `i` retains its original value (10), demonstrating that the `for` loop did not alter it.\n\nHowever, if this code were inside a function, `i` would be entirely scoped within that function's local environment, meaning any loop variables would only affect other variables within the function itself.\n\n### Nested Scopes\nJulia allows for nested functions, which can access variables in their enclosing scopes. This is known as lexical scoping.\n\n::: {#942d15c1 .cell execution_count=17}\n``` {.julia .cell-code}\nfunction outer_function(x)\n    y = 2\n    function inner_function(z)\n        return x + y + z\n    end\n    return inner_function\nend\n\nclosure = outer_function(3)\n@myshow begin #| hide\nclosure(4)  # Outputs: 9 (3 + 2 + 4)\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> closure(4) = 9\n```\n:::\n:::\n\n\nIn this example, `inner_function` forms a closure over the variables `x` and `y`, retaining access to them even after `outer_function` has finished executing.\n\n### Closures\nA closure is a function that captures variables from its surrounding lexical scope, allowing the function to use these variables even after the scope where they were defined has ended. Closures are especially useful for creating customized functions or \"function factories.\"\n\n#### Example: Using a Global Variable vs. Capturing a Variable in a Closure\nTo illustrate the difference between referencing a global variable and capturing a variable in a closure, let’s first create a function that uses a global variable:\n\n::: {#21b81a5e .cell execution_count=18}\n``` {.julia .cell-code}\n@myshow begin #| hide\nfactor = 2\n\nfunction multiply_by_global(x)\n    return x * factor\nend\n\nmultiply_by_global(5)  # Outputs: 10\n\n# Update the global variable `factor`\nfactor = 3\nmultiply_by_global(5)  # Outputs: 15 (factor is now 3)\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> factor = 2\njulia> function multiply_by_global(x)\n    return x * factor\nend\njulia> multiply_by_global(5) = 10\njulia> factor = 3\njulia> multiply_by_global(5) = 15\n```\n:::\n:::\n\n\nIn this example, `multiply_by_global` uses the global variable `factor`, so whenever `factor` is updated, the result of calling `multiply_by_global` changes.\n\n#### Example: Capturing a Variable in a Closure\nNow, let’s use a closure to capture the `factor` variable inside a function. Here, the captured value of `factor` remains fixed at the time the closure was created, regardless of changes to the variable afterward.\n\n::: {#8e96343a .cell execution_count=19}\n``` {.julia .cell-code}\n@myshow begin #| hide\nfunction make_multiplier(factor)\n    return (x) -> x * factor  # Returns a closure that captures `factor`\nend\n\ndouble = make_multiplier(2)   # `factor` is captured as 2 in this closure\ntriple = make_multiplier(3)   # `factor` is captured as 3 in this closure\n\ndouble(5)  # Outputs: 10\ntriple(5)  # Outputs: 15\n\n# Even if we change `factor` globally, it doesn't affect the closure\nfactor = 4\ndouble(5)  # Still outputs: 10\ntriple(5)  # Still outputs: 15\nend #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> function make_multiplier(factor)\n    return (x->begin\n                x * factor\n            end)\nend\njulia> double = make_multiplier(2)\njulia> triple = make_multiplier(3)\njulia> double(5) = 10\njulia> triple(5) = 15\njulia> factor = 4\njulia> double(5) = 10\njulia> triple(5) = 15\n```\n:::\n:::\n\n\nIn this example, `make_multiplier` returns a function that captures the `factor` variable when the closure is created. This means that `double` will always multiply by `2`, and `triple` will always multiply by `3`, regardless of any subsequent changes to `factor`.\n\n### Summary\nUsing closures in Julia allows you to \"lock in\" the values of variables from an outer scope at the time of the closure's creation. This differs from referencing global variables directly, where any changes to the variable are reflected immediately. Closures are particularly useful for creating function factories or callbacks that need to retain specific values independently of changes in the global scope.\n\nUnderstanding scope is crucial for performance in Julia. Defining variables within a local scope, such as inside functions, can lead to more efficient code execution. Global variables can lead to performance penalties due to type instability.\n\nIn summary, scoping rules in Julia allow for clear management of variable accessibility and lifespan, while closures enable powerful programming patterns by capturing the context in which they are created. Understanding these concepts is key to writing effective Julia code.\n\n## Modules\n\nModules can be seen as \"boxes\" in which you organise related functions. Such a \"box\" can be reused in other program. To have access to the function from \"box\" `B`, you should add `using B` at the beginning of your program. To call some function `f` stored in `B`, you type `B.f`. Thus modules avoid conflicts on function names by providing a seperate namespace. This means that a function `f` from the main program will indeed be seen as a different function than `B.f`. \n\nFind bellow an example of the definition of a simple module.\n\n::: {#3b9c3f31 .cell execution_count=20}\n``` {.julia .cell-code}\nmodule MyModule\n\n# Defining a function inside the module\nfunction greet(name)\n    println(\"Hello, $name !\")\nend\n\n# Defining a constant inside the module\nconst Pi = 3.14159\n\nend  # End of the module\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nMain.MyModule\n```\n:::\n:::\n\n\nLet us now use the function and variable in another program.\n\n::: {#638dfdcc .cell execution_count=21}\n``` {.julia .cell-code}\nusing .MyModule  # Importing the module\n\nMyModule.greet(\"Alice\")  # Calling the function from MyModule\nprintln(MyModule.Pi)     # Accessing the constant from MyModule\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice !\n3.14159\n```\n:::\n:::\n\n\n## Exercices\n\n### Exercise 1: Temperature Converter\nWrite a function `convert_temperature` that takes a temperature value and a keyword argument `unit` that can either be `\"C\"` for Celsius or `\"F\"` for Fahrenheit. The function should convert the temperature to the other unit and return the converted value. Use a conditional statement to determine the conversion formula:\n\n- If the unit is `\"C\"`, convert to Fahrenheit using the formula: \n$$\n    F = C \\times \\frac{9}{5} + 32\n$$\n\n- If the unit is `\"F\"`, convert to Celsius using the formula: \n$$\n    C = (F - 32) \\times \\frac{5}{9}\n$$\n\n**Example Output:**\n```julia\nprintln(convert_temperature(100, unit=\"C\"))  # Outputs: 212.0\nprintln(convert_temperature(32, unit=\"F\"))    # Outputs: 0.0\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## To go further for Exercise 1: Temperature Converter\nIf the `unit` provided is not `\"C\"` or `\"F\"`, you can raise an error using the `throw` statement along with `ArgumentError`. This way, you can inform the user that the input is invalid.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 1: Temperature Converter\n\n::: {#741bff0c .cell execution_count=22}\n``` {.julia .cell-code}\nfunction convert_temperature(value; unit)\n    if unit == \"C\"\n        return value * 9/5 + 32  # Convert Celsius to Fahrenheit\n    elseif unit == \"F\"\n        return (value - 32) * 5/9  # Convert Fahrenheit to Celsius\n    else\n        throw(ArgumentError(\"Unit must be 'C' or 'F'\"))\n    end\nend\n\nprintln(convert_temperature(100, unit=\"C\"))  # Outputs: 212.0\nprintln(convert_temperature(32, unit=\"F\"))    # Outputs: 0.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n212.0\n0.0\n```\n:::\n:::\n\n\n:::\n\n### Exercise 2: Manipulating Tuples\n\n1. Create a **tuple** `t` with three elements: a string, an integer, and a float.\n2. Try to mutate the first element of the tuple and handle any errors using a `try-catch` block.\n3. Create a **NamedTuple** `nt` with fields `name`, `age`, and `height`, and initialize it with your details.\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint for Exercise 2:\n- Remember that tuples are immutable, so you can't modify their elements.\n- Use a `try-catch` block to catch errors if an operation fails.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 2:\n\n::: {#7fdd22b1 .cell execution_count=23}\n``` {.julia .cell-code}\n# Create a tuple with three elements: a string, an integer, and a float\nt = (\"John\", 25, 5.9)\n\n# Attempt to mutate the first element of the tuple with error handling\ntry\n    t[1] = \"Alice\"  # This will raise an error because tuples are immutable\ncatch e\n    println(\"Error: \", e)\nend\n\n# Create a NamedTuple with fields: name, age, and height\nnt = (name = \"John\", age = 25, height = 5.9)\n\nprintln(\"NamedTuple: \", nt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError: MethodError(setindex!, ((\"John\", 25, 5.9), \"Alice\", 1), 0x00000000000068f3)\nNamedTuple: (name = \"John\", age = 25, height = 5.9)\n```\n:::\n:::\n\n\n:::\n\n### Exercise 3: Factorial Function with Closure\nCreate a function `make_factorial` that returns a closure. This closure should compute the factorial of a number. The closure should capture a variable that keeps track of the number of times it has been called. When the closure is called, it should return the factorial of the number and the call count.\n\n**Example Output:**\n```julia\nfactorial_closure = make_factorial()\nresult, count = factorial_closure(5)\nprintln(result)  # Outputs: 120\nresult, count = factorial_closure(3)\nprintln(result)  # Outputs: 6\nprintln(\"Function called \", count, \" times\")  # Outputs: 2 times\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint Exercise 3: Factorial Function with Closure\nWhen returning the results from the closure, you can return a pair of values by creating a tuple. In Julia, tuples are created using parentheses, like this: `(value1, value2)`.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 3: Factorial Function with Closure\n\n::: {#08103e74 .cell execution_count=24}\n``` {.julia .cell-code}\nfunction make_factorial()\n    counter = 0 # Variable to keep track of calls\n    function factorial(n::Int)\n        y = 1\n        for i ∈ 2:n\n            y *= i \n        end\n        counter += 1\n        return y, counter\n    end\n    return factorial \nend\n\nfactorial_closure = make_factorial()\nresult, count = factorial_closure(5)\nprintln(result)  # Outputs: 120\nresult, count = factorial_closure(3)\nprintln(result)  # Outputs: 6\nprintln(\"Function called \", count, \" times\")  # Outputs: 2 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n120\n6\nFunction called 2 times\n```\n:::\n:::\n\n\n:::\n\n### Exercise 4: Filter Even Numbers\nWrite a function `filter_even` that takes an array of integers as input and returns a new array containing only the even numbers from the input array. Use a loop and a conditional statement to check each number.\n\nAdditionally, implement a helper function `is_even` that checks if a number is even. Use the `filter_even` function to filter an array of numbers, and print the result.\n\n**Example Output:**\n```julia\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even(numbers)\nprintln(even_numbers)  # Outputs: [2, 4, 6, 8, 10]\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint for Exercise 4: Filter Even Numbers\nTo add elements to an array in Julia, use the `push!` function. This function takes two arguments: the array you want to modify and the element to add to that array.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 4: Filter Even Numbers\n\n::: {#3898f3f4 .cell execution_count=25}\n``` {.julia .cell-code}\nfunction is_even(x)\n    return x % 2 == 0\nend\n\nfunction filter_even(numbers)\n    even_numbers = []\n    for number in numbers\n        if is_even(number)\n            push!(even_numbers, number)\n        end\n    end\n    return even_numbers\nend\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even(numbers)\nprintln(even_numbers)  # Outputs: [2, 4, 6, 8, 10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAny[2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\n:::\n\n### Exercise Instructions\n1. For each exercise, implement the required functions in a new Julia script or interactive session.\n2. Test your functions with different inputs to ensure they work as expected.\n3. Comment on your code to explain the logic behind each part, especially where you utilize control flow and scope.\n\n",
    "supporting": [
      "structure_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}