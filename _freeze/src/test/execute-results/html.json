{
  "hash": "2e31aacff1c38f5ea42018309ef52f58",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Test\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n::: {#fddbdd96 .cell execution_count=2}\n``` {.julia .cell-code}\n@myshow begin #| hide\nx = 10          # x is inferred to be of type Int64\ny = 3.14        # y is inferred to be of type Float64\nz = \"Hello\"     # z is inferred to be of type String\n\ntypeof(x), typeof(y), typeof(z)\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> x = 10\njulia> y = 3.14\njulia> z = \"Hello\"\njulia> (typeof(x), typeof(y), typeof(z)) = (Int64, Float64, String)\n```\n:::\n:::\n\n\n::: {#6302123e .cell execution_count=3}\n``` {.julia .cell-code}\n@myshow begin #| hide\na = 1+0\na + 2\nb = 1\nb\ng(x) = 2\ng(3)\nfunction f(x)\n    return x + 2\nend\nf(3)\nfunction make_closure(x)\n    return (y) -> x*y\nend\ndouble = make_closure(2)\ndouble(3)\n1 + \"2\"\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> a = 1\njulia> a + 2 = 3\njulia> b = 1\njulia> b = 1\njulia> g(x) = begin\n        2\n    end\njulia> g(3)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>UndefVarError: `g` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n\nStacktrace:\n [1] <span class=\"ansi-bold\">macro expansion</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">show.jl:1232</span><span class=\"ansi-bright-black-fg\"> [inlined]</span>\n [2] <span class=\"ansi-bold\">macro expansion</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/Courses/julia/course-tse-julia/assets/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">myshow.jl:82</span><span class=\"ansi-bright-black-fg\"> [inlined]</span>\n [3] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[4]:7</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c29b353b .cell execution_count=4}\n``` {.julia .cell-code}\n# Define a simple struct for a point in 2D space\nstruct Point\n    x::Float64\n    y::Float64\nend\n```\n:::\n\n\n::: {#0ae10832 .cell execution_count=5}\n``` {.julia .cell-code}\nstruct Circle\n    center::Point\n    radius::Float64\nend\n\n# Define a custom constructor\nfunction Circle(x::Real, y::Real, radius::Real)\n    if radius <= 0\n        throw(DomainError(radius, \"Radius must be positive\"))\n    end\n    Circle(Point(float(x), float(y)), float(radius))\nend\nnothing #| hide\n```\n:::\n\n\n::: {#0769deda .cell execution_count=6}\n``` {.julia .cell-code}\n@myshow begin #| hide\n# Create a Circle using the custom constructor\nc = Circle(0, 0, 5)  # Creates a Circle with center (0.0, 0.0) and radius 5.0\n\n# Attempt to create a Circle with an invalid radius\nc = Circle(0, 0, -3)  # Throws an error: \"Radius must be positive\"\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> c = Circle(Point(0.0, 0.0), 5.0)\njulia> c = Circle(0, 0, -3)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>DomainError with -3:\nRadius must be positive\n\nStacktrace:\n [1] <span class=\"ansi-bold\">Circle</span><span class=\"ansi-bold\">(</span><span class=\"ansi-bright-black-fg\">x</span>::Int64, <span class=\"ansi-bright-black-fg\">y</span>::Int64, <span class=\"ansi-bright-black-fg\">radius</span>::Int64<span class=\"ansi-bold\">)</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span class=\"ansi-bright-black-fg\">./</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[6]:9</span>\n [2] <span class=\"ansi-bold\">macro expansion</span>\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/Courses/julia/course-tse-julia/assets/julia/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">myshow.jl:53</span><span class=\"ansi-bright-black-fg\"> [inlined]</span>\n [3] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[7]:7</span></pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "test_files"
    ],
    "filters": [],
    "includes": {}
  }
}