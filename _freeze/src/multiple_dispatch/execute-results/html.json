{
  "hash": "228747c5c53e25ae29845d7745415ea1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Methods and Multiple Dispatch in Julia\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n::: {.callout-note}\nThis page is still under construction. For more details about methods and multiple dispatch in Julia, please refer to the official [Julia Methods Documentation](https://docs.julialang.org/en/v1/manual/methods/).\n:::\n\nJulia’s [**multiple dispatch**](https://en.wikipedia.org/wiki/Multiple_dispatch) system is a defining feature and core paradigm of the language. Multiple dispatch allows Julia to select which method to execute based on the types of all arguments provided to a function, rather than just the first one. This approach enables Julia to adaptively execute optimized methods for each specific combination of argument types, resulting in highly flexible and efficient code.\n\n## What is Multiple Dispatch?\n\nIn languages with **single dispatch**, such as Python, Java, or C++, method selection is determined solely by the type of one object, often the first argument or the calling object (e.g., `object.method()`). In contrast, **multiple dispatch** in Julia means that methods are chosen based on all arguments, making functions truly polymorphic in response to different type combinations.\n\nThis behavior can be seen in Julia with the syntax:\n\n```julia\nfunction my_function(x::Int, y::Float64)\n    println(\"Called with Int and Float64\")\nend\n\nfunction my_function(x::String, y::Int)\n    println(\"Called with String and Int\")\nend\n```\n\nIn this example, Julia will dynamically determine the appropriate method based on the types of both arguments passed to `my_function`. This flexibility is central to Julia's design and unlocks substantial benefits for performance and usability.\n\n### Why is Julia’s Dispatch System Powerful and Unique?\n\nJulia’s dispatch system is distinctive because it combines the flexibility of dynamic typing with the performance of compiled languages. With multiple dispatch, Julia compiles specialized versions of functions for specific type combinations, enabling it to achieve high performance close to that of statically compiled languages like C and Fortran. This capability solves the “two-language problem,” where developers often prototype in high-level languages (e.g., Python, R) but rewrite performance-critical parts in low-level languages for speed.\n\n### Benefits of Multiple Dispatch\n\n1. **Performance**: Julia's compiler generates efficient machine code for specific type combinations, allowing function calls to avoid the overhead of type checks and branching, which are often required in other dynamically typed languages.\n  \n2. **Code Flexibility and Reusability**: Multiple dispatch allows developers to write more modular and reusable code. Functions can be extended to handle new types by simply defining additional methods, without modifying existing code.\n\n3. **Cleaner, More Intuitive Code**: With multiple dispatch, function definitions naturally describe the intended behavior for specific types, making code easier to read and understand. There’s no need for verbose type checking inside functions, which keeps code concise.\n\n## Specialization and Method Selection\n\nIn Julia, you can define multiple methods for the same function, each specialized for different combinations of argument types. This is done by specifying the types of the function's arguments using type annotations. Julia will then choose the appropriate method based on the types of the arguments passed at runtime.\n\n### Basic Examples\n\nLet’s define a function `f` that handles different types of input.\n\n::: {#7541dd51 .cell execution_count=2}\n``` {.julia .cell-code}\nf(x::Int, y::Int) = println(\"($x, $y) ∈ ℤ × ℤ\")\nf(x::Float64, y::Float64) = println(\"($x, $y) ∈ ℝ × ℝ\")\nf(x::Int, y::Float64) = println(\"($x, $y) ∈ ℤ × ℝ\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nf (generic function with 3 methods)\n```\n:::\n:::\n\n\nNow, depending on the types of the arguments, Julia will dispatch the appropriate method:\n\n::: {#70c73822 .cell execution_count=3}\n``` {.julia .cell-code}\nf(2, 3)         # Calls the method for integers\nf(2.5, 3.5)     # Calls the method for floats\nf(2, 3.5)       # Calls the mixed-type method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2, 3) ∈ ℤ × ℤ\n(2.5, 3.5) ∈ ℝ × ℝ\n(2, 3.5) ∈ ℤ × ℝ\n```\n:::\n:::\n\n\n## Ambiguous Dispatch\n\nAmbiguous dispatch occurs when Julia cannot determine which method to call because multiple methods are applicable for the given arguments. This happens when there is overlap in the argument types of different methods, making it unclear which method should be selected.\n\n### Why Ambiguous Dispatch Can Occur?\n\nWhen you define multiple methods for the same function, each method is associated with specific types of arguments. Ambiguous dispatch happens when there are two or more methods that could potentially match the types of the arguments passed to the function. Julia relies on the order of method definitions and their specificity to resolve which method to dispatch, but sometimes it’s unable to make a clear decision, resulting in ambiguity.\n\n### Example of Ambiguous Dispatch\n\nLet’s define methods for the function `g` where the ambiguity arises because of overlapping types:\n\n::: {#b24ff995 .cell execution_count=4}\n``` {.julia .cell-code}\ng(x::Real, y::Real) = println(\"($x, $y) ∈ ℝ × ℝ\")\ng(x::Integer, y::Real) = println(\"($x, $y) ∈ ℤ × ℝ\")\ng(x::Real, y::Integer) = println(\"($x, $y) ∈ ℝ × ℤ\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ng (generic function with 3 methods)\n```\n:::\n:::\n\n\nLet first call `g` with arguments that match only one method:\n\n::: {#0d1bfbf7 .cell execution_count=5}\n``` {.julia .cell-code}\ng(1.0, 2.0)    # Calls the method for two floats\ng(1, 2.0)      # Calls the method for integer and float\ng(1.0, 2)      # Calls the method for float and integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1.0, 2.0) ∈ ℝ × ℝ\n(1, 2.0) ∈ ℤ × ℝ\n(1.0, 2) ∈ ℝ × ℤ\n```\n:::\n:::\n\n\nNow, let’s try to call `g` with arguments that could match both methods, like this:\n\n::: {#58ad85b6 .cell execution_count=6}\n``` {.julia .cell-code}\ng(2, 3)        # Error: Ambiguous dispatch\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: g(::Int64, ::Int64) is ambiguous.\n\nCandidates:\n  g(<span class=\"ansi-bright-black-fg\">x</span>::<span class=\"ansi-bold\">Real</span>, <span class=\"ansi-bright-black-fg\">y</span>::<span class=\"ansi-bold\">Integer</span>)\n<span class=\"ansi-bright-black-fg\">    @</span> <span class=\"ansi-bright-black-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[5]:3</span>\n  g(<span class=\"ansi-bright-black-fg\">x</span>::<span class=\"ansi-bold\">Integer</span>, <span class=\"ansi-bright-black-fg\">y</span>::<span class=\"ansi-bold\">Real</span>)\n<span class=\"ansi-bright-black-fg\">    @</span> <span class=\"ansi-bright-black-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[5]:2</span>\n\nPossible fix, define\n  g(::Integer, ::Integer)\n\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[7]:1</span></pre>\n```\n:::\n\n:::\n:::\n\n\nIn this case, the methods `g(x::Integer, y::Real)` and `g(x::Real, y::Integer)` both match, and Julia cannot decide which one to dispatch to, that is why the error occurs. To resolve this ambiguity, you can follow the advice in the error message and define another specialized method that covers the ambiguous case: `g(x::Integer, y::Integer)`. You can also refactor the existing methods to avoid ambiguity: replace for instance `Real` with `Float64` or `Integer` with `Int`.\n\n## Parametric Functions\n\nYou can define **parametric functions** in Julia that work with different types, which are specified using type parameters. These functions are flexible and can operate on any type that is passed to them when called.\n\n### Example: Identity Function\n\nHere’s an example of a simple identity function `id`, which returns whatever value is passed to it, regardless of its type:\n\n::: {#b423a60c .cell execution_count=7}\n``` {.julia .cell-code}\nfunction id(x::T) where T\n    return x\nend\n\n@myshow begin #| hide\nid(42)       # Integer\nid(3.14)     # Float64\nid(\"Hello\")  # String\nend #| hide\nnothing #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> id(42) = 42\njulia> id(3.14) = 3.14\njulia> id(\"Hello\") = \"Hello\"\n```\n:::\n:::\n\n\nIn this case, the function `id` works for any type `T`, and you can pass an `Int`, `Float64`, `String`, or any other type. Julia automatically infers the type of `T` based on the argument passed to the function. This makes `id` a highly flexible function.\n\nYou can specify the return type of a parametric function by adding a return type annotation:\n\n::: {#7e706e07 .cell execution_count=8}\n``` {.julia .cell-code}\nfunction double(x::T)::T where {T <: Number}\n    return 2x\nend\n\ndouble(12) # Integer\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n24\n```\n:::\n:::\n\n\nYou can also force to return a specific type:\n\n::: {#6ee8139c .cell execution_count=9}\n``` {.julia .cell-code}\nfunction triple(x::T)::Float64 where {T <: Real}\n    return 3x\nend\n\ntriple(12) # Float64\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n36.0\n```\n:::\n:::\n\n\n### Constraints on Parametric Functions\n\nYou can also add **constraints** to parametric functions, ensuring that the parametric type parameter must be a subtype of a specific type. This is useful when you want the function to operate only on certain types, such as numeric types or specific structures.\n\n#### Example: Adding a Constraint on Numbers\n\nHere’s an example where we define a function `add_one` that only works with numeric types. The type parameter `T` is constrained to be a subtype of `Number`:\n\n::: {#c29da9a6 .cell execution_count=10}\n``` {.julia .cell-code}\nfunction add_one(x::T) where T <: Number\n    return x + 1\nend\n\nadd_one(3)       # Valid: 3 + 1 = 4\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n4\n```\n:::\n:::\n\n\n::: {#6fc11e0e .cell execution_count=11}\n``` {.julia .cell-code}\nadd_one(3.14)    # Valid: 3.14 + 1 = 4.14\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n4.140000000000001\n```\n:::\n:::\n\n\n::: {#aded9afd .cell execution_count=12}\n``` {.julia .cell-code}\nadd_one(\"Hello\")  # Error: String is not a subtype of Number\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching add_one(::String)\nThe function `add_one` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  add_one(<span class=\"ansi-bright-red-fg\">::T</span>) where T&lt;:Number\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[11]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[13]:1</span></pre>\n```\n:::\n\n:::\n:::\n\n\nIn this case, the function `add_one` will only accept types that are subtypes of `Number` (such as `Int`, `Float64`, etc.). If you try to pass a non-numeric type like `String`, Julia will throw an error.\n\n#### Restricting to More Specific Types\n\nYou can further restrict the parametric type to more specific types. For example, you could specify that a function should only accept `Int64` or a specific subtype of `Number`, excluding other subtypes like `Float64` or `Complex`:\n\n::: {#9c35c4dd .cell execution_count=13}\n``` {.julia .cell-code}\nfunction double(x::T) where T <: Int64\n    return x * 2\nend\n\ndouble(10)    # Valid: 10 * 2 = 20\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n20\n```\n:::\n:::\n\n\n::: {#c8f7441e .cell execution_count=14}\n``` {.julia .cell-code}\ndouble(3.14)  # Error: Float64 is not a subtype of Int64\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n6.28\n```\n:::\n:::\n\n\n### Comparison with Type Annotations\n\nWhen you use **type annotations**, you specify a fixed type for a function argument. For example, if you want to ensure that an argument is a subtype of `Number`, you can use a type annotation like this:\n\n::: {#02ab5629 .cell execution_count=15}\n``` {.julia .cell-code}\nfunction display_number(x::Number)\n    println(\"The number is: \", x)\nend\nnothing #| hide\n```\n:::\n\n\nIn this case, `x` can be of any type that is a subtype of `Number` (such as `Int`, `Float64`, etc.). However, the type is not explicitly accessible in the function body.\n\nOn the other hand, **parametric functions with constraints** allow you to achieve the same flexibility but also give you direct access to the type parameter. For example, you can write a function with a parametric type `T` constrained to `Number`, and you will have access to the type `T` directly:\n\n::: {#374cd68e .cell execution_count=16}\n``` {.julia .cell-code}\nfunction display_number_constrained(x::T) where T <: Number\n    println(\"The number is of type: \", T)\n    println(\"The number is: \", x)\nend\nnothing #| hide\n```\n:::\n\n\nIn this parametric version, `T` is directly accessible inside the function body, allowing you to print the type along with the value. This provides more flexibility if you need to work with the type itself.\n\nBoth functions will accept any subtype of `Number`, but the parametric version also allows you to access and use the type parameter explicitly, while the annotated version does not.\n\n### Multiple Constrained Arguments\n\nYou can also add constraints on **multiple arguments** to ensure that they all have the same type. This is useful when you want to perform operations on multiple variables that should all belong to the same type, but still want the flexibility of working with different types.\n\nHere’s an example where we define a function that accepts two arguments, both constrained to be of the same type:\n\n::: {#8c19b15a .cell execution_count=17}\n``` {.julia .cell-code}\nfunction add_numbers(x::T, y::T) where T <: Number\n    return x + y\nend\n\nadd_numbers(3, 4)       # Valid: 3 + 4 = 7\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n7\n```\n:::\n:::\n\n\n::: {#52d1d309 .cell execution_count=18}\n``` {.julia .cell-code}\nadd_numbers(2.5, 3.5)   # Valid: 2.5 + 3.5 = 6.0\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n6.0\n```\n:::\n:::\n\n\n::: {#846d9567 .cell execution_count=19}\n``` {.julia .cell-code}\nadd_numbers(3, 3.5)     # Error: Arguments have different types (Int and Float64)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching add_numbers(::Int64, ::Float64)\nThe function `add_numbers` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  add_numbers(::T, <span class=\"ansi-bright-red-fg\">::T</span>) where T&lt;:Number\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[18]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[20]:1</span></pre>\n```\n:::\n\n:::\n:::\n\n\nIn this case, the function `add_numbers` will only accept two arguments that have the same type `T`. If you try to pass arguments of different types, such as an `Int` and a `Float64`, Julia will throw an error. This ensures that the function works with consistent types for both arguments while maintaining flexibility for different numeric types.\n\n### Parametric Arguments and Vectors\n\nYou can also use parametric types with multiple arguments to ensure that both the elements of a vector and the vector itself conform to a specific type. Here’s an example where we define a function that accepts a vector of a parametric type and a second parametric argument:\n\n::: {#e01656c7 .cell execution_count=20}\n``` {.julia .cell-code}\nfunction add_elements(vec::Vector{T}, value::T) where T\n    return [x + value for x in vec]\nend\n\nadd_elements([1, 2, 3], 2)  # Valid: Adds 2 to each element of the vector\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n3-element Vector{Int64}:\n 3\n 4\n 5\n```\n:::\n:::\n\n\n::: {#4b03172c .cell execution_count=21}\n``` {.julia .cell-code}\nadd_elements([1.5, 2.5, 3.5], 1.0)  # Valid: Adds 1.0 to each element of the vector\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n3-element Vector{Float64}:\n 2.5\n 3.5\n 4.5\n```\n:::\n:::\n\n\n::: {#a905eb40 .cell execution_count=22}\n``` {.julia .cell-code}\nadd_elements([1, 2, 3], 3.14)  # Error: Vector contains Int, but value is Float64\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching add_elements(::Vector{Int64}, ::Float64)\nThe function `add_elements` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  add_elements(::Vector{T}, <span class=\"ansi-bright-red-fg\">::T</span>) where T\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[21]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[23]:1</span></pre>\n```\n:::\n\n:::\n:::\n\n\nIn this example, both the vector and the `value` passed to the function must have the same type `T`. If you try to pass a vector of `Int` with a `Float64` value, Julia will throw an error, ensuring type consistency between the vector elements and the value being added.\n\n### Summary\n\n- **Parametric Functions** allow you to define functions that can work with multiple types, using type parameters that are inferred when the function is called.\n- **Type Annotations** are used when you want to specify a fixed type for a function argument, but they don’t offer the same flexibility as parametric functions.\n- **Constraints on Parametric Functions** let you restrict the type parameter to specific types or subtypes, ensuring that the function only operates on valid types.\n- **Restricting to More Specific Types** allows you to narrow the scope of types further, offering more control over the types accepted by the function.\n- **Multiple Constrained Arguments** ensures that two or more arguments in a function have the same type, while still providing flexibility for different types, ensuring consistency in operations with multiple parameters.\n- **Using Parametric Arguments with Vectors** allows you to define functions that ensure both the vector elements and the second argument match a specific type, ensuring consistency in operations.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Parametric Functions in Julia\n\n\n\n::: {#3e901b86 .cell execution_count=24}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=25}\n**Question 1. What is a parametric function in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#0c80f39e .cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<script>\nvar ID = \"TB58vonJ\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='TB58vonJ'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_TB58vonJ\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_TB58vonJ_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_TB58vonJ\"\n           id=\"radio_TB58vonJ_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        A function that can only work with a fixed type.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_TB58vonJ_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_TB58vonJ\"\n           id=\"radio_TB58vonJ_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        A function that operates only on numeric types.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_TB58vonJ_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_TB58vonJ\"\n           id=\"radio_TB58vonJ_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        A function that works with multiple types, specified by type parameters.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_TB58vonJ_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_TB58vonJ\"\n           id=\"radio_TB58vonJ_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        A function that cannot be defined without specifying a type.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='TB58vonJ_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_TB58vonJ').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_TB58vonJ')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_TB58vonJ\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('TB58vonJ_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_TB58vonJ\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_TB58vonJ\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#3b0c2d71 .cell execution_count=26}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=27}\n**Question 2. What does the following function `id` do?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction id(x::T) where T\n    return x\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#a7f59c5e .cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<script>\nvar ID = \"ueV0iX3p\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='ueV0iX3p'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_ueV0iX3p\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ueV0iX3p_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ueV0iX3p\"\n           id=\"radio_ueV0iX3p_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It returns the type of the argument.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ueV0iX3p_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ueV0iX3p\"\n           id=\"radio_ueV0iX3p_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It prints the argument.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ueV0iX3p_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ueV0iX3p\"\n           id=\"radio_ueV0iX3p_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It adds one to the argument.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ueV0iX3p_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ueV0iX3p\"\n           id=\"radio_ueV0iX3p_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It returns the argument without any modification.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='ueV0iX3p_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_ueV0iX3p').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_ueV0iX3p')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_ueV0iX3p\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('ueV0iX3p_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_ueV0iX3p\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_ueV0iX3p\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#ace45efe .cell execution_count=28}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=29}\n**Question 3. What happens when you call `add_one(3)` with the following function?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add_one(x::T) where T <: Number\n    return x + 1\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#f9b470c2 .cell execution_count=29}\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<script>\nvar ID = \"JHf7bg1a\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='JHf7bg1a'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_JHf7bg1a\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_JHf7bg1a_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_JHf7bg1a\"\n           id=\"radio_JHf7bg1a_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add one to a numeric argument and throw an error for non-numeric types.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_JHf7bg1a_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_JHf7bg1a\"\n           id=\"radio_JHf7bg1a_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add one to any type.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_JHf7bg1a_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_JHf7bg1a\"\n           id=\"radio_JHf7bg1a_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add one to a string argument and return a new string.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_JHf7bg1a_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_JHf7bg1a\"\n           id=\"radio_JHf7bg1a_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will throw an error for all inputs.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='JHf7bg1a_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_JHf7bg1a').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_JHf7bg1a')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_JHf7bg1a\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('JHf7bg1a_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_JHf7bg1a\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_JHf7bg1a\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#367ee2e3 .cell execution_count=30}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=31}\n**Question 4. What does the following function do?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction double(x::T) where T <: Int64\n    return x * 2\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#b255aae0 .cell execution_count=31}\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<script>\nvar ID = \"f0A2lBUo\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='f0A2lBUo'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_f0A2lBUo\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_f0A2lBUo_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_f0A2lBUo\"\n           id=\"radio_f0A2lBUo_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It doubles the argument if it&#39;s a Float64.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_f0A2lBUo_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_f0A2lBUo\"\n           id=\"radio_f0A2lBUo_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It throws an error for any argument.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_f0A2lBUo_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_f0A2lBUo\"\n           id=\"radio_f0A2lBUo_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It adds two to the argument if it&#39;s an Int64.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_f0A2lBUo_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_f0A2lBUo\"\n           id=\"radio_f0A2lBUo_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It doubles the argument if it&#39;s an Int64.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='f0A2lBUo_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_f0A2lBUo').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_f0A2lBUo')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_f0A2lBUo\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('f0A2lBUo_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_f0A2lBUo\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_f0A2lBUo\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#28be566a .cell execution_count=32}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=33}\n**Question 5. What is the advantage of using parametric functions with constraints?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#1a7e15d6 .cell execution_count=33}\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<script>\nvar ID = \"MFNGhUgq\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='MFNGhUgq'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_MFNGhUgq\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_MFNGhUgq_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_MFNGhUgq\"\n           id=\"radio_MFNGhUgq_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        They restrict the function to only accept types that meet the constraints.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_MFNGhUgq_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_MFNGhUgq\"\n           id=\"radio_MFNGhUgq_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        They allow the function to modify the types passed to it.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_MFNGhUgq_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_MFNGhUgq\"\n           id=\"radio_MFNGhUgq_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        They allow the function to work with any type.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_MFNGhUgq_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_MFNGhUgq\"\n           id=\"radio_MFNGhUgq_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        They make the function less flexible but more efficient.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='MFNGhUgq_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_MFNGhUgq').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_MFNGhUgq')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_MFNGhUgq\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('MFNGhUgq_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_MFNGhUgq\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_MFNGhUgq\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#1a58962e .cell execution_count=34}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=35}\n**Question 6. What happens when you call `add_numbers(3, 3.5)` with the following function?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add_numbers(x::T, y::T) where T <: Number\n    return x + y\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#1cbe0e00 .cell execution_count=35}\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<script>\nvar ID = \"Rn1LghsM\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='Rn1LghsM'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_Rn1LghsM\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_Rn1LghsM_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_Rn1LghsM\"\n           id=\"radio_Rn1LghsM_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will throw an error because the arguments have different types.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_Rn1LghsM_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_Rn1LghsM\"\n           id=\"radio_Rn1LghsM_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will return the sum of the arguments as a string.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_Rn1LghsM_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_Rn1LghsM\"\n           id=\"radio_Rn1LghsM_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add the two numbers together.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_Rn1LghsM_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_Rn1LghsM\"\n           id=\"radio_Rn1LghsM_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add the numbers and print the result.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='Rn1LghsM_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_Rn1LghsM').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_Rn1LghsM')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_Rn1LghsM\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('Rn1LghsM_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_Rn1LghsM\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_Rn1LghsM\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#7265e98d .cell execution_count=36}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=37}\n**Question 7. What does the following code do?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add_elements(vec::Vector{T}, value::T) where T\n    return [x + value for x in vec]\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#3b30fba5 .cell execution_count=37}\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<script>\nvar ID = \"rvP8PMVX\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='rvP8PMVX'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_rvP8PMVX\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_rvP8PMVX_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_rvP8PMVX\"\n           id=\"radio_rvP8PMVX_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It multiplies each element in the vector by <code>value</code>.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_rvP8PMVX_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_rvP8PMVX\"\n           id=\"radio_rvP8PMVX_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It adds the <code>value</code> to each element in the <code>vec</code>.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_rvP8PMVX_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_rvP8PMVX\"\n           id=\"radio_rvP8PMVX_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It throws an error if the vector and value types don’t match.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_rvP8PMVX_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_rvP8PMVX\"\n           id=\"radio_rvP8PMVX_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It adds the <code>value</code> to the vector itself.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='rvP8PMVX_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_rvP8PMVX').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_rvP8PMVX')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_rvP8PMVX\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('rvP8PMVX_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_rvP8PMVX\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_rvP8PMVX\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#a4ccfe75 .cell execution_count=38}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=39}\n**Question 8. What happens when you call `add_elements([1, 2, 3], 3.14)`?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nadd_elements([1, 2, 3], 3.14)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#dabfc83f .cell execution_count=39}\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<script>\nvar ID = \"gVg174dy\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='gVg174dy'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_gVg174dy\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_gVg174dy_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_gVg174dy\"\n           id=\"radio_gVg174dy_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will multiply each element of the vector by 3.14.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_gVg174dy_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_gVg174dy\"\n           id=\"radio_gVg174dy_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will return an error because the vector and value types don’t match.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_gVg174dy_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_gVg174dy\"\n           id=\"radio_gVg174dy_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will return a new vector with the elements increased by 3.14.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_gVg174dy_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_gVg174dy\"\n           id=\"radio_gVg174dy_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will add <code>3.14</code> to each element in the vector and return the result.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='gVg174dy_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_gVg174dy').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_gVg174dy')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_gVg174dy\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('gVg174dy_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_gVg174dy\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_gVg174dy\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#ba2af666 .cell execution_count=40}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=41}\n**Question 9. What happens when you call `add_elements([1, 2, 3], 3.14)` when the vector contains `Int` and the value is `Float64`?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nadd_elements([1, 2, 3], 3.14)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#72b9cd79 .cell execution_count=41}\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<script>\nvar ID = \"ZGpzxENf\"\n</script>\n<form class=\"mx-2 my-3 mw-100 qqquestion\"\n      name='WeaveQuestion'\n      data-id='ZGpzxENf'\n      data-controltype=''\n      onSubmit='return false;'\n      >\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_ZGpzxENf\" correct='-1' attempts='0'>\n\n    <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\"\n        aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ZGpzxENf_1\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ZGpzxENf\"\n           id=\"radio_ZGpzxENf_1\"\n           value=\"1\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will throw an error because the types don&#39;t match.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ZGpzxENf_2\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ZGpzxENf\"\n           id=\"radio_ZGpzxENf_2\"\n           value=\"2\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will return a vector with elements <code>4.14</code>, <code>5.14</code>, <code>6.14</code>.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ZGpzxENf_3\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ZGpzxENf\"\n           id=\"radio_ZGpzxENf_3\"\n           value=\"3\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will return a new vector where each element is added to <code>3.14</code>.\n    </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label qqradio\"\n           for=\"radio_ZGpzxENf_4\">\n    <input class=\"form-check-input\"\n           type=\"radio\"\n           name=\"radio_ZGpzxENf\"\n           id=\"radio_ZGpzxENf_4\"\n           value=\"4\">\n    </input>\n    <span class=\"label-body px-1\">\n        It will work because <code>Int</code> can be automatically converted to <code>Float64</code>.\n    </span>\n    </label>\n</div>\n</fieldset>\n\n         </div>\n    </div>\n    <div id='ZGpzxENf_message'\n         class='qqmessage'\n         style=\"padding-bottom: 15px\">\n    </div>\n</form>\n<script>\ndocument.getElementById('controls_ZGpzxENf').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_ZGpzxENf')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_ZGpzxENf\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('ZGpzxENf_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'> <span>✔&nbsp; Correct </span> </div>\";\n    var explanation = document.getElementById(\"explanation_ZGpzxENf\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\",\n          {bubbles:true, detail:{correct: 1}}\n  );\n  this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'> <span>Χ&nbsp; Incorrect </span> </div>\";\n    var explanation = document.getElementById(\"explanation_ZGpzxENf\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\",\n           {bubbles:true, detail:{correct: 0}}\n  );\n  this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: \n\n",
    "supporting": [
      "multiple_dispatch_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}