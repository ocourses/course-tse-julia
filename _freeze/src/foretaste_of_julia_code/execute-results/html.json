{
  "hash": "b4a0c6cbe5f1a94b3c84ed67c0ab0419",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Foretaste of Julia Code\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nJulia is a high-level, high-performance programming language primarily designed for numerical and scientific computing. Its syntax is familiar to users of other technical computing environments, while its flexibility and performance make it an excellent choice for a wide range of applications. In this section, we will look at a few simple examples to illustrate some core features of Julia and demonstrate its intuitive and powerful design.\n\n## Variables\n\n### Simple Assignment\n\nIn Julia, you can assign values to variables directly:\n\n::: {#eb5b00c0 .cell execution_count=2}\n``` {.julia .cell-code}\nx = 1   # Assign an integer to x\n2x      # The result of 2 * x\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n2\n```\n:::\n:::\n\n\n### Mathematical Operations\n\nYou can also perform mathematical operations directly on variables:\n\n::: {#cc22490f .cell execution_count=3}\n``` {.julia .cell-code}\nx = sqrt(2)    # Assign the square root of 2 to x\nx              # Output the value of x\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1.4142135623730951\n```\n:::\n:::\n\n\n### Using Unicode\n\nJulia allows you to use Unicode characters in your code, which makes it more expressive:\n\n::: {#d06af7ff .cell execution_count=4}\n``` {.julia .cell-code}\n# Unicode is great\nx = âˆš(2)        # Square root symbol for 2\nx               # The value of x is the square root of 2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n1.4142135623730951\n```\n:::\n:::\n\n\n### Custom Variable Names\n\nJulia even allows using emojis for variable names:\n\n::: {#67afa665 .cell execution_count=5}\n``` {.julia .cell-code}\nðŸ˜„ = sqrt(2)    # Assign the square root of 2 to the emoji variable\n2ðŸ˜„              # Result of 2 times ðŸ˜„\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2.8284271247461903\n```\n:::\n:::\n\n\n::: {.callout-note}\nVisit the list of [Unicode Input](https://docs.julialang.org/en/v1/manual/unicode-input/) for more examples.\n:::\n\n## Functions\n\n### Simple Function Definition\n\nIn Julia, you can define a function using the `function` keyword:\n\n::: {#ce8290ad .cell execution_count=6}\n``` {.julia .cell-code}\n# this is a function\nfunction f(x)\n  return 2x + 1   # Return a value that is double x plus 1\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\nTo evaluate a function, simply call it with an argument:\n\n::: {#0ae89638 .cell execution_count=7}\n``` {.julia .cell-code}\nf(2)  # Output: 5\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n5\n```\n:::\n:::\n\n\n### Function Definition in Assignment Form\n\nJulia also supports defintion of functions in assignement form, which are often used for short operations:\n\n::: {#05500064 .cell execution_count=8}\n``` {.julia .cell-code}\n# This is also a function\ng(x) = 2x + 1   # A shorthand for defining a function\ng(2)            # Output: 5\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n5\n```\n:::\n:::\n\n\n### Anonymous Functions\n\nJulia also supports anonymous functions (functions without a name):\n\n::: {#b0ffc8b1 .cell execution_count=9}\n``` {.julia .cell-code}\n# Another example with anonymous function\nh = x -> 2x^2    # Function definition using the arrow syntax\nh(1)             # Output: 2, since 2 * 1^2 = 2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n2\n```\n:::\n:::\n\n\n### Function Priority and Operator Precedence\n\nIn some cases, you need to be cautious about operator precedence:\n\n::: {#9b8048bd .cell execution_count=10}\n``` {.julia .cell-code}\n# Be careful of operator priorities\nh(1 + 1)  # The correct evaluation is 2 * (1+1)^2 = 8\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n8\n```\n:::\n:::\n\n\n## Side Effects\n\nIn Julia, functions can have **side effects**, meaning they modify variables or objects outside the scope of the function. Hereâ€™s an example:\n\n### Mutating Vectors\n\nLet's consider the following vector:\n\n::: {#7a0526d4 .cell execution_count=11}\n``` {.julia .cell-code}\nx = [1, 3, 12]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n3-element Vector{Int64}:\n  1\n  3\n 12\n```\n:::\n:::\n\n\nYou can access an element of the vector like this:\n\n::: {#cb98d2b5 .cell execution_count=12}\n``` {.julia .cell-code}\nx[2]  # Output: 3, the second element of the array\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n3\n```\n:::\n:::\n\n\nTo update an element, simply reassign it:\n\n::: {#f0a0ef8b .cell execution_count=13}\n``` {.julia .cell-code}\nx[2] = 5  # Changes the second element to 5\nx         # Now x = [1, 5, 12]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n3-element Vector{Int64}:\n  1\n  5\n 12\n```\n:::\n:::\n\n\n### Side Effects in Functions\n\nIf you mutate data inside a function, it will have side effects. For example, consider this function:\n\n::: {#2c1b76bf .cell execution_count=14}\n``` {.julia .cell-code}\nfunction f(x, y)\n    x[1] = 42        # Mutates x\n    y = 7 + sum(x)   # New binding for y, no mutation\n    return y\nend\n\na = [4, 5, 6]\nb = 3\n\nprintln(\"f($a, $b) = \", f(a, b))  # f modifies 'a' but not 'b'\nprintln(\"a = \", a, \" # a[1] is changed to 42 by f\")\nprintln(\"b = \", b, \" # b remains unchanged\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf([4, 5, 6], 3) = 60\na = [42, 5, 6] # a[1] is changed to 42 by f\nb = 3 # b remains unchanged\n```\n:::\n:::\n\n\n### The Bang Convention\n\nWhen a function has side effects, it's a good practice to use the `!` symbol at the end of the function's name. This is called the **bang convention**, and it signals that the function mutates its arguments:\n\n::: {#bca98cf1 .cell execution_count=15}\n``` {.julia .cell-code}\nfunction put_at_second_place!(x, value)\n  x[2] = value\n  return nothing  # No explicit return, it's just a side effect\nend\n\nx = [1, 3, 12]\nprintln(\"x[2] before: \", x[2])\n\nput_at_second_place!(x, 5)  # Mutates x\nprintln(\"x[2] after: \", x[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx[2] before: 3\nx[2] after: 5\n```\n:::\n:::\n\n\n### Caution with Slices\n\nWhen you pass a slice of an array to a function in Julia, the slice is actually a copy, so modifying it does **not** alter the original array:\n\n::: {#77abcdf2 .cell execution_count=16}\n``` {.julia .cell-code}\nx = [1, 2, 3, 4]\nprintln(\"x[2] before slice modification: \", x[2])\n\nput_at_second_place!(x[1:3], 15)  # Safe to modify the slice\n\nprintln(\"x[2] after slice modification: \", x[2])  # Original array remains unchanged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx[2] before slice modification: 2\nx[2] after slice modification: 2\n```\n:::\n:::\n\n\n::: {.callout-tip} \nWhen working with slices, remember that they are copies in Julia. Modifying a slice will not impact the original array, which helps prevent unintentional changes to your data. \n:::\n\n## Methods\n\nJulia supports multiple methods for the same function name, which allows for more flexible and dynamic behavior. Here's an example:\n\n### Method Overloading\n\nYou can define several methods for the same function with different types:\n\n::: {#f5b92b22 .cell execution_count=17}\n``` {.julia .cell-code}\nÎ£(x::Float64, y::Float64) = 2x + y   # Method for Float64 inputs\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nÎ£ (generic function with 1 method)\n```\n:::\n:::\n\n\nCalling the function:\n\n::: {#c2f6d4d7 .cell execution_count=18}\n``` {.julia .cell-code}\nÎ£(2.0, 3.0)  # Output: 7.0\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n7.0\n```\n:::\n:::\n\n\nIf you call `Î£` with arguments that don't match the types, Julia will throw an error:\n\n::: {#68d688cb .cell execution_count=19}\n``` {.julia .cell-code}\nÎ£(2, 3.0)  # Error: no method matching Î£(::Int64, ::Float64)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching Î£(::Int64, ::Float64)\nThe function `Î£` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  Î£(<span class=\"ansi-bright-red-fg\">::Float64</span>, ::Float64)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[18]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[20]:1</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### Multiple Methods for Different Types\n\nYou can define more methods that work with different types:\n\n::: {#75ee362e .cell execution_count=20}\n``` {.julia .cell-code}\nÏ†(x::Number, y::Number) = 2x - y           # General method for numbers\nÏ†(x::Int, y::Int)     = 2x * y             # Method for integers\nÏ†(x::Float64, y::Float64) = 2x + y         # Method for Float64\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nÏ† (generic function with 3 methods)\n```\n:::\n:::\n\n\n### Method Dispatch Example\n\nJulia will select the appropriate method based on the argument types:\n\n::: {#61ef0eb4 .cell execution_count=21}\n``` {.julia .cell-code}\nprintln(\"Ï†(2,   3.0) = \", Ï†(2, 3.0))       # Uses general method\nprintln(\"Ï†(2,   3)   = \", Ï†(2, 3))         # Uses the integer method\nprintln(\"Ï†(2.0, 3.0) = \", Ï†(2.0, 3.0))     # Uses the Float64 method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nÏ†(2,   3.0) = 1.0\nÏ†(2,   3)   = 12\nÏ†(2.0, 3.0) = 7.0\n```\n:::\n:::\n\n\n## Iterators\n\nIn Julia, iterators allow you to loop through collections in a memory-efficient way. Hereâ€™s an example of using `1:5` as an iterator:\n\n::: {#3e998546 .cell execution_count=22}\n``` {.julia .cell-code}\nfor i in 1:5\n    println(i)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n```\n:::\n:::\n\n\nThis prints the numbers from 1 to 5. You can also iterate through ranges and collections:\n\n::: {#479fd7df .cell execution_count=23}\n``` {.julia .cell-code}\nfor i in [10, 20, 30]\n    println(i)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n20\n30\n```\n:::\n:::\n\n\n### Working with Lazy Collections\n\nJuliaâ€™s `Iterators` package allows for lazy collections, where values are computed on demand. Hereâ€™s an example:\n\n::: {#a2b29365 .cell execution_count=24}\n``` {.julia .cell-code}\nusing Base.Iterators: cycle\nround = 1\nfor i in cycle([1, 2, 3])\n    println(i)\n    if i == 3\n      if round == 2\n        break\n      else\n        round += 1\n      end\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n1\n2\n3\n```\n:::\n:::\n\n\nThis loops over the values 1, 2, and 3, repeating as a cycle.\n\n## Type Stability\n\nJulia has **type stability** for fast compilation and execution. When writing functions, it's important to ensure that the type of the return value can be determined without ambiguity. \n\nExample of type **instability**:\n\n::: {#587825ce .cell execution_count=25}\n``` {.julia .cell-code}\nfunction f(x)\n    if x > 0\n        return 1\n    else\n        return 0.0\n    end\nend\n\nprintln(\"The value  2 of type \", typeof( 2), \" produces an output of type \", typeof(f( 2)))\nprintln(\"The value -2 of type \", typeof(-2), \" produces an output of type \", typeof(f(-2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value  2 of type Int64 produces an output of type Int64\nThe value -2 of type Int64 produces an output of type Float64\n```\n:::\n:::\n\n\nJulia is dynamically typed, but ensuring **type stability** within functions helps the compiler optimize code for better performance.\n\n::: {.callout-tip}\nFor better performance, always try to ensure type stability in your functions. This can be achieved by making the return type predictable, from the types of input variables and not their values.\n:::\n\n## Exercise\n\n### Least Squares Regression Line\n\nWe propose a first exercise about [simple linear regression](https://en.wikipedia.org/wiki/Simple_linear_regression). The data are excerpted from this [example](https://www.ncl.ac.uk/webtemplate/ask-assets/external/maths-resources/statistics/regression-and-correlation/simple-linear-regression.html) and saved into [data.csv](data.csv). We propose an [ordinary least squares](https://en.wikipedia.org/wiki/Ordinary_least_squares) formulation which is a type of [linear least squares](https://en.wikipedia.org/wiki/Linear_least_squares) method for choosing the unknown parameters in a linear regression model by the principle of least squares: minimizing the sum of the squares of the differences between the observed dependent variable (values of the variable being observed) in the input dataset and the output of the (linear) function of the independent variable.\n\n<img max-height=\"300px\" style=\"float: right;\" src=\"images/Linear_least_squares_example2.svg\"/>\n\nGiven a set ofÂ $m$Â data pointsÂ $y_{1}$, $y_{2}$, $\\dots$, $y_{m}$,Â consisting of experimentally measured values taken atÂ $m$Â valuesÂ $x_{1}$, $x_{2}$, $\\dots$, $x_{m}$Â of an independent variable ($x_i$Â may be scalar or vector quantities), and given a model functionÂ $y=f(x,\\beta),$Â withÂ $\\beta =(\\beta_{1},\\beta_{2},\\dots ,\\beta_{n})$,Â it is desired to find the parametersÂ $\\beta_j$ such that the model function \"best\" fits the data. In linear least squares, linearity is meant to be with respect to parametersÂ $\\beta_j$, so\n$$\n  f(x, \\beta) = \\sum_{j=1}^n \\beta_j\\, \\varphi_j(x).\n$$\nIn general, the functions $\\varphi_j$ may be nonlinear. However, we consider linear regression, that is\n$$\n  f(x, \\beta) = \\beta_1 + \\beta_2 x.\n$$\nIdeally, the model function fits the data exactly, so \n$$\n  y_i = f(x_i, \\beta)\n$$\nfor all $i=1, 2, \\dots, m$. This is usually not possible in practice, as there are more data points than there are parameters to be determined. The approach chosen then is to find the minimal possible value of the sum of squares of the residuals\n$$\n  r_i(\\beta) = y_i - f(x_i, \\beta), \\quad i=1, 2, \\dots, m\n$$\nso to minimize the function\n$$\n  S(\\beta) = \\sum_{i=1}^m r_i^2(\\beta).\n$$\nIn the linear least squares case, the residuals are of the form\n$$\n  r(\\beta) = y - X\\, \\beta\n$$\nwith $y = (y_i)_{1\\le i\\le m} \\in \\mathbb{R}^m$ and $X = (X_{ij})_{1\\le i\\le m, 1\\le j\\le n} \\in \\mathrm{M}_{mn}(\\mathbb{R})$, where $X_{ij} = \\varphi_j(x_i)$. Since we consider linear regression, the $i$-th row of the matrix $X$ is given by\n$$\n  X_{i[:]} = [1 \\quad x_i].\n$$\nThe objective function may be written\n$$\n  S(\\beta) = {\\Vert y - X\\, \\beta \\Vert}^2\n$$\nwhere the norm is the usual $2$-norm. The solution to the linear least squares problem\n$$\n  \\underset{\\beta \\in \\mathbb{R}^n}{\\mathrm{minimize}}\\, {\\Vert y - X\\, \\beta \\Vert}^2\n$$\nis computed by solving the *normal equation*\n$$\n  X^\\top X\\, \\beta = X^\\top y,\n$$\nwhere $X^\\top$ denotes the transpose of $X$.\n\n### Questions\n\nTo answer the questions you need to import the following packages.\n\n::: {#e040b4a8 .cell execution_count=26}\n``` {.julia .cell-code}\nusing DataFrames\nusing CSV\nusing Plots\n```\n:::\n\n\nYou also need to download the csv file. Click on the following image.\n\n<a href=\"data/introduction/data.csv\" download>\n  <img src=\"../assets/images/logo-csv-download.png\" width=\"50\">\n</a>\n\n1. Using the packages `DataFrames.jl` and `CSV.jl`, load the dataset from [data/introduction/data.csv](data/introduction/data.csv) and save the result into a variable named `dataset`.\n\n::: {#59a2240f .cell execution_count=27}\n``` {.julia .cell-code code-fold=\"true\" code-summary=\"Show the answer\"}\npath = \"data/introduction/data.csv\" # update depending on the location of your file\ndataset = DataFrame(CSV.File(path))\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div><div style = \"float: left;\"><span>5Ã—2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Time</th><th style = \"text-align: left;\">Mass</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">40</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">120</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">12</td><td style = \"text-align: right;\">180</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">16</td><td style = \"text-align: right;\">210</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">20</td><td style = \"text-align: right;\">240</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {.callout-note}\nDo not hesitate to visit the documentation of `CSV.jl` and `DataFrames.jl`.\n:::\n\n2. Using the package `Plot.jl`, plot the data. \n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nUse `names(dataset)` to get the list of data names. If `Time` is a name you can access to the associated data by `dataset.Time`.\n:::\n\n::: {#cd9c48db .cell execution_count=28}\n``` {.julia .cell-code code-fold=\"true\" code-summary=\"Show the answer\"}\nplt = plot(\n  dataset.Time, \n  dataset.Mass,\n  seriestype=:scatter, \n  legend=false, \n  xlabel=\"Time\", \n  ylabel=\"Mass\"\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip930\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M0 1600 L2400 1600 L2400 8.88178e-14 L0 8.88178e-14  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip931\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M234.125 1423.18 L2352.76 1423.18 L2352.76 47.2441 L234.125 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip932\">\n    <rect x=\"234\" y=\"47\" width=\"2120\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"427.334,1423.18 427.334,47.2441 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"827.075,1423.18 827.075,47.2441 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1226.82,1423.18 1226.82,47.2441 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1626.56,1423.18 1626.56,47.2441 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2026.3,1423.18 2026.3,47.2441 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,1319.34 2352.76,1319.34 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,994.822 2352.76,994.822 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,670.309 2352.76,670.309 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,345.796 2352.76,345.796 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"427.334,1423.18 427.334,1404.28 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"827.075,1423.18 827.075,1404.28 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1226.82,1423.18 1226.82,1404.28 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1626.56,1423.18 1626.56,1404.28 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2026.3,1423.18 2026.3,1404.28 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M427.739 1466.44 Q424.591 1466.44 422.739 1468.59 Q420.91 1470.74 420.91 1474.49 Q420.91 1478.22 422.739 1480.39 Q424.591 1482.55 427.739 1482.55 Q430.887 1482.55 432.716 1480.39 Q434.568 1478.22 434.568 1474.49 Q434.568 1470.74 432.716 1468.59 Q430.887 1466.44 427.739 1466.44 M437.021 1451.78 L437.021 1456.04 Q435.262 1455.21 433.457 1454.77 Q431.674 1454.33 429.915 1454.33 Q425.285 1454.33 422.832 1457.45 Q420.401 1460.58 420.054 1466.9 Q421.42 1464.89 423.48 1463.82 Q425.54 1462.73 428.017 1462.73 Q433.225 1462.73 436.234 1465.9 Q439.267 1469.05 439.267 1474.49 Q439.267 1479.82 436.119 1483.03 Q432.97 1486.25 427.739 1486.25 Q421.744 1486.25 418.572 1481.67 Q415.401 1477.06 415.401 1468.33 Q415.401 1460.14 419.29 1455.28 Q423.179 1450.39 429.73 1450.39 Q431.489 1450.39 433.271 1450.74 Q435.077 1451.09 437.021 1451.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M817.376 1484.86 L817.376 1480.6 Q819.136 1481.44 820.941 1481.88 Q822.747 1482.32 824.483 1482.32 Q829.113 1482.32 831.543 1479.21 Q833.997 1476.09 834.344 1469.75 Q833.001 1471.74 830.941 1472.8 Q828.881 1473.87 826.381 1473.87 Q821.196 1473.87 818.163 1470.74 Q815.154 1467.59 815.154 1462.15 Q815.154 1456.83 818.302 1453.61 Q821.451 1450.39 826.682 1450.39 Q832.677 1450.39 835.825 1455 Q838.997 1459.58 838.997 1468.33 Q838.997 1476.51 835.108 1481.39 Q831.242 1486.25 824.691 1486.25 Q822.932 1486.25 821.126 1485.9 Q819.321 1485.56 817.376 1484.86 M826.682 1470.21 Q829.83 1470.21 831.659 1468.06 Q833.511 1465.9 833.511 1462.15 Q833.511 1458.43 831.659 1456.27 Q829.83 1454.1 826.682 1454.1 Q823.534 1454.1 821.682 1456.27 Q819.853 1458.43 819.853 1462.15 Q819.853 1465.9 821.682 1468.06 Q823.534 1470.21 826.682 1470.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1202.3 1481.64 L1209.94 1481.64 L1209.94 1455.28 L1201.63 1456.95 L1201.63 1452.69 L1209.9 1451.02 L1214.57 1451.02 L1214.57 1481.64 L1222.21 1481.64 L1222.21 1485.58 L1202.3 1485.58 L1202.3 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1235.68 1481.64 L1252 1481.64 L1252 1485.58 L1230.06 1485.58 L1230.06 1481.64 Q1232.72 1478.89 1237.3 1474.26 Q1241.91 1469.61 1243.09 1468.27 Q1245.34 1465.74 1246.22 1464.01 Q1247.12 1462.25 1247.12 1460.56 Q1247.12 1457.8 1245.17 1456.07 Q1243.25 1454.33 1240.15 1454.33 Q1237.95 1454.33 1235.5 1455.09 Q1233.07 1455.86 1230.29 1457.41 L1230.29 1452.69 Q1233.11 1451.55 1235.57 1450.97 Q1238.02 1450.39 1240.06 1450.39 Q1245.43 1450.39 1248.62 1453.08 Q1251.82 1455.77 1251.82 1460.26 Q1251.82 1462.39 1251.01 1464.31 Q1250.22 1466.2 1248.11 1468.8 Q1247.53 1469.47 1244.43 1472.69 Q1241.33 1475.88 1235.68 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1601.74 1481.64 L1609.38 1481.64 L1609.38 1455.28 L1601.07 1456.95 L1601.07 1452.69 L1609.34 1451.02 L1614.01 1451.02 L1614.01 1481.64 L1621.65 1481.64 L1621.65 1485.58 L1601.74 1485.58 L1601.74 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1631.14 1451.02 L1649.5 1451.02 L1649.5 1454.96 L1635.42 1454.96 L1635.42 1463.43 Q1636.44 1463.08 1637.46 1462.92 Q1638.48 1462.73 1639.5 1462.73 Q1645.29 1462.73 1648.67 1465.9 Q1652.04 1469.08 1652.04 1474.49 Q1652.04 1480.07 1648.57 1483.17 Q1645.1 1486.25 1638.78 1486.25 Q1636.6 1486.25 1634.34 1485.88 Q1632.09 1485.51 1629.68 1484.77 L1629.68 1480.07 Q1631.77 1481.2 1633.99 1481.76 Q1636.21 1482.32 1638.69 1482.32 Q1642.69 1482.32 1645.03 1480.21 Q1647.37 1478.1 1647.37 1474.49 Q1647.37 1470.88 1645.03 1468.77 Q1642.69 1466.67 1638.69 1466.67 Q1636.81 1466.67 1634.94 1467.08 Q1633.09 1467.5 1631.14 1468.38 L1631.14 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2001.03 1481.64 L2008.67 1481.64 L2008.67 1455.28 L2000.36 1456.95 L2000.36 1452.69 L2008.63 1451.02 L2013.3 1451.02 L2013.3 1481.64 L2020.94 1481.64 L2020.94 1485.58 L2001.03 1485.58 L2001.03 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2040.39 1469.17 Q2037.05 1469.17 2035.13 1470.95 Q2033.23 1472.73 2033.23 1475.86 Q2033.23 1478.98 2035.13 1480.77 Q2037.05 1482.55 2040.39 1482.55 Q2043.72 1482.55 2045.64 1480.77 Q2047.56 1478.96 2047.56 1475.86 Q2047.56 1472.73 2045.64 1470.95 Q2043.74 1469.17 2040.39 1469.17 M2035.71 1467.18 Q2032.7 1466.44 2031.01 1464.38 Q2029.34 1462.32 2029.34 1459.35 Q2029.34 1455.21 2032.28 1452.8 Q2035.25 1450.39 2040.39 1450.39 Q2045.55 1450.39 2048.49 1452.8 Q2051.43 1455.21 2051.43 1459.35 Q2051.43 1462.32 2049.74 1464.38 Q2048.07 1466.44 2045.08 1467.18 Q2048.46 1467.96 2050.34 1470.26 Q2052.24 1472.55 2052.24 1475.86 Q2052.24 1480.88 2049.16 1483.57 Q2046.1 1486.25 2040.39 1486.25 Q2034.67 1486.25 2031.59 1483.57 Q2028.53 1480.88 2028.53 1475.86 Q2028.53 1472.55 2030.43 1470.26 Q2032.33 1467.96 2035.71 1467.18 M2034 1459.79 Q2034 1462.48 2035.66 1463.98 Q2037.35 1465.49 2040.39 1465.49 Q2043.4 1465.49 2045.08 1463.98 Q2046.8 1462.48 2046.8 1459.79 Q2046.8 1457.11 2045.08 1455.6 Q2043.4 1454.1 2040.39 1454.1 Q2037.35 1454.1 2035.66 1455.6 Q2034 1457.11 2034 1459.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1215.32 1520.52 L1255.52 1520.52 L1255.52 1525.93 L1238.65 1525.93 L1238.65 1568.04 L1232.19 1568.04 L1232.19 1525.93 L1215.32 1525.93 L1215.32 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1259.46 1532.4 L1265.32 1532.4 L1265.32 1568.04 L1259.46 1568.04 L1259.46 1532.4 M1259.46 1518.52 L1265.32 1518.52 L1265.32 1525.93 L1259.46 1525.93 L1259.46 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1305.33 1539.24 Q1307.52 1535.29 1310.58 1533.41 Q1313.64 1531.54 1317.77 1531.54 Q1323.34 1531.54 1326.37 1535.45 Q1329.39 1539.33 1329.39 1546.53 L1329.39 1568.04 L1323.5 1568.04 L1323.5 1546.72 Q1323.5 1541.59 1321.69 1539.11 Q1319.87 1536.63 1316.15 1536.63 Q1311.6 1536.63 1308.96 1539.65 Q1306.32 1542.68 1306.32 1547.9 L1306.32 1568.04 L1300.43 1568.04 L1300.43 1546.72 Q1300.43 1541.56 1298.61 1539.11 Q1296.8 1536.63 1293.01 1536.63 Q1288.52 1536.63 1285.88 1539.68 Q1283.24 1542.71 1283.24 1547.9 L1283.24 1568.04 L1277.35 1568.04 L1277.35 1532.4 L1283.24 1532.4 L1283.24 1537.93 Q1285.24 1534.66 1288.05 1533.1 Q1290.85 1531.54 1294.7 1531.54 Q1298.58 1531.54 1301.29 1533.51 Q1304.02 1535.48 1305.33 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1371.56 1548.76 L1371.56 1551.62 L1344.64 1551.62 Q1345.02 1557.67 1348.27 1560.85 Q1351.54 1564 1357.37 1564 Q1360.74 1564 1363.89 1563.17 Q1367.08 1562.35 1370.2 1560.69 L1370.2 1566.23 Q1367.04 1567.57 1363.73 1568.27 Q1360.42 1568.97 1357.02 1568.97 Q1348.49 1568.97 1343.49 1564 Q1338.53 1559.04 1338.53 1550.57 Q1338.53 1541.82 1343.24 1536.69 Q1347.98 1531.54 1356 1531.54 Q1363.19 1531.54 1367.36 1536.18 Q1371.56 1540.8 1371.56 1548.76 M1365.71 1547.04 Q1365.64 1542.23 1363 1539.37 Q1360.39 1536.5 1356.06 1536.5 Q1351.16 1536.5 1348.2 1539.27 Q1345.27 1542.04 1344.83 1547.07 L1365.71 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1423.18 234.125,47.2441 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1319.34 253.023,1319.34 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,994.822 253.023,994.822 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,670.309 253.023,670.309 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,345.796 253.023,345.796 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M146.066 1302.06 L164.422 1302.06 L164.422 1305.99 L150.348 1305.99 L150.348 1314.46 Q151.366 1314.12 152.385 1313.95 Q153.403 1313.77 154.422 1313.77 Q160.209 1313.77 163.589 1316.94 Q166.968 1320.11 166.968 1325.53 Q166.968 1331.11 163.496 1334.21 Q160.024 1337.29 153.704 1337.29 Q151.528 1337.29 149.26 1336.92 Q147.015 1336.55 144.607 1335.81 L144.607 1331.11 Q146.691 1332.24 148.913 1332.8 Q151.135 1333.35 153.612 1333.35 Q157.616 1333.35 159.954 1331.25 Q162.292 1329.14 162.292 1325.53 Q162.292 1321.92 159.954 1319.81 Q157.616 1317.7 153.612 1317.7 Q151.737 1317.7 149.862 1318.12 Q148.01 1318.54 146.066 1319.42 L146.066 1302.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.181 1305.13 Q182.57 1305.13 180.741 1308.7 Q178.936 1312.24 178.936 1319.37 Q178.936 1326.48 180.741 1330.04 Q182.57 1333.58 186.181 1333.58 Q189.815 1333.58 191.621 1330.04 Q193.45 1326.48 193.45 1319.37 Q193.45 1312.24 191.621 1308.7 Q189.815 1305.13 186.181 1305.13 M186.181 1301.43 Q191.991 1301.43 195.047 1306.04 Q198.125 1310.62 198.125 1319.37 Q198.125 1328.1 195.047 1332.7 Q191.991 1337.29 186.181 1337.29 Q180.371 1337.29 177.292 1332.7 Q174.237 1328.1 174.237 1319.37 Q174.237 1310.62 177.292 1306.04 Q180.371 1301.43 186.181 1301.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M116.668 1008.17 L124.306 1008.17 L124.306 981.802 L115.996 983.468 L115.996 979.209 L124.26 977.542 L128.936 977.542 L128.936 1008.17 L136.575 1008.17 L136.575 1012.1 L116.668 1012.1 L116.668 1008.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M156.019 980.621 Q152.408 980.621 150.579 984.186 Q148.774 987.728 148.774 994.857 Q148.774 1001.96 150.579 1005.53 Q152.408 1009.07 156.019 1009.07 Q159.653 1009.07 161.459 1005.53 Q163.288 1001.96 163.288 994.857 Q163.288 987.728 161.459 984.186 Q159.653 980.621 156.019 980.621 M156.019 976.917 Q161.829 976.917 164.885 981.524 Q167.964 986.107 167.964 994.857 Q167.964 1003.58 164.885 1008.19 Q161.829 1012.77 156.019 1012.77 Q150.209 1012.77 147.13 1008.19 Q144.075 1003.58 144.075 994.857 Q144.075 986.107 147.13 981.524 Q150.209 976.917 156.019 976.917 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.181 980.621 Q182.57 980.621 180.741 984.186 Q178.936 987.728 178.936 994.857 Q178.936 1001.96 180.741 1005.53 Q182.57 1009.07 186.181 1009.07 Q189.815 1009.07 191.621 1005.53 Q193.45 1001.96 193.45 994.857 Q193.45 987.728 191.621 984.186 Q189.815 980.621 186.181 980.621 M186.181 976.917 Q191.991 976.917 195.047 981.524 Q198.125 986.107 198.125 994.857 Q198.125 1003.58 195.047 1008.19 Q191.991 1012.77 186.181 1012.77 Q180.371 1012.77 177.292 1008.19 Q174.237 1003.58 174.237 994.857 Q174.237 986.107 177.292 981.524 Q180.371 976.917 186.181 976.917 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M116.668 683.654 L124.306 683.654 L124.306 657.289 L115.996 658.955 L115.996 654.696 L124.26 653.029 L128.936 653.029 L128.936 683.654 L136.575 683.654 L136.575 687.589 L116.668 687.589 L116.668 683.654 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M146.066 653.029 L164.422 653.029 L164.422 656.965 L150.348 656.965 L150.348 665.437 Q151.366 665.089 152.385 664.927 Q153.403 664.742 154.422 664.742 Q160.209 664.742 163.589 667.914 Q166.968 671.085 166.968 676.501 Q166.968 682.08 163.496 685.182 Q160.024 688.261 153.704 688.261 Q151.528 688.261 149.26 687.89 Q147.015 687.52 144.607 686.779 L144.607 682.08 Q146.691 683.214 148.913 683.77 Q151.135 684.325 153.612 684.325 Q157.616 684.325 159.954 682.219 Q162.292 680.113 162.292 676.501 Q162.292 672.89 159.954 670.784 Q157.616 668.677 153.612 668.677 Q151.737 668.677 149.862 669.094 Q148.01 669.511 146.066 670.39 L146.066 653.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.181 656.108 Q182.57 656.108 180.741 659.673 Q178.936 663.214 178.936 670.344 Q178.936 677.451 180.741 681.015 Q182.57 684.557 186.181 684.557 Q189.815 684.557 191.621 681.015 Q193.45 677.451 193.45 670.344 Q193.45 663.214 191.621 659.673 Q189.815 656.108 186.181 656.108 M186.181 652.404 Q191.991 652.404 195.047 657.011 Q198.125 661.594 198.125 670.344 Q198.125 679.071 195.047 683.677 Q191.991 688.261 186.181 688.261 Q180.371 688.261 177.292 683.677 Q174.237 679.071 174.237 670.344 Q174.237 661.594 177.292 657.011 Q180.371 652.404 186.181 652.404 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M119.885 359.141 L136.204 359.141 L136.204 363.076 L114.26 363.076 L114.26 359.141 Q116.922 356.386 121.505 351.757 Q126.112 347.104 127.292 345.761 Q129.538 343.238 130.417 341.502 Q131.32 339.743 131.32 338.053 Q131.32 335.299 129.376 333.562 Q127.455 331.826 124.353 331.826 Q122.154 331.826 119.7 332.59 Q117.269 333.354 114.492 334.905 L114.492 330.183 Q117.316 329.049 119.769 328.47 Q122.223 327.891 124.26 327.891 Q129.63 327.891 132.825 330.576 Q136.019 333.262 136.019 337.752 Q136.019 339.882 135.209 341.803 Q134.422 343.701 132.316 346.294 Q131.737 346.965 128.635 350.183 Q125.533 353.377 119.885 359.141 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M156.019 331.595 Q152.408 331.595 150.579 335.16 Q148.774 338.701 148.774 345.831 Q148.774 352.937 150.579 356.502 Q152.408 360.044 156.019 360.044 Q159.653 360.044 161.459 356.502 Q163.288 352.937 163.288 345.831 Q163.288 338.701 161.459 335.16 Q159.653 331.595 156.019 331.595 M156.019 327.891 Q161.829 327.891 164.885 332.498 Q167.964 337.081 167.964 345.831 Q167.964 354.558 164.885 359.164 Q161.829 363.747 156.019 363.747 Q150.209 363.747 147.13 359.164 Q144.075 354.558 144.075 345.831 Q144.075 337.081 147.13 332.498 Q150.209 327.891 156.019 327.891 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.181 331.595 Q182.57 331.595 180.741 335.16 Q178.936 338.701 178.936 345.831 Q178.936 352.937 180.741 356.502 Q182.57 360.044 186.181 360.044 Q189.815 360.044 191.621 356.502 Q193.45 352.937 193.45 345.831 Q193.45 338.701 191.621 335.16 Q189.815 331.595 186.181 331.595 M186.181 327.891 Q191.991 327.891 195.047 332.498 Q198.125 337.081 198.125 345.831 Q198.125 354.558 195.047 359.164 Q191.991 363.747 186.181 363.747 Q180.371 363.747 177.292 359.164 Q174.237 354.558 174.237 345.831 Q174.237 337.081 177.292 332.498 Q180.371 327.891 186.181 327.891 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M16.4842 812.476 L16.4842 802.895 L48.8219 790.769 L16.4842 778.578 L16.4842 768.998 L64.0042 768.998 L64.0042 775.268 L22.277 775.268 L54.8694 787.522 L54.8694 793.983 L22.277 806.237 L64.0042 806.237 L64.0042 812.476 L16.4842 812.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M46.0847 740.289 Q46.0847 747.386 47.7079 750.124 Q49.3312 752.861 53.2461 752.861 Q56.3653 752.861 58.2114 750.824 Q60.0256 748.755 60.0256 745.222 Q60.0256 740.352 56.5881 737.424 Q53.1188 734.464 47.3897 734.464 L46.0847 734.464 L46.0847 740.289 M43.6657 728.608 L64.0042 728.608 L64.0042 734.464 L58.5933 734.464 Q61.8398 736.469 63.3994 739.461 Q64.9272 742.453 64.9272 746.782 Q64.9272 752.256 61.8716 755.503 Q58.7843 758.717 53.6281 758.717 Q47.6125 758.717 44.5569 754.707 Q41.5014 750.665 41.5014 742.676 L41.5014 734.464 L40.9285 734.464 Q36.8862 734.464 34.6901 737.138 Q32.4621 739.779 32.4621 744.585 Q32.4621 747.641 33.1941 750.537 Q33.9262 753.434 35.3903 756.107 L29.9795 756.107 Q28.7381 752.893 28.1334 749.869 Q27.4968 746.845 27.4968 743.981 Q27.4968 736.246 31.5072 732.427 Q35.5176 728.608 43.6657 728.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M29.4065 693.819 L34.9447 693.819 Q33.6716 696.302 33.035 698.975 Q32.3984 701.649 32.3984 704.513 Q32.3984 708.874 33.7352 711.07 Q35.072 713.234 37.7456 713.234 Q39.7826 713.234 40.9603 711.675 Q42.1061 710.115 43.1565 705.405 L43.6021 703.399 Q44.9389 697.161 47.3897 694.551 Q49.8086 691.909 54.1691 691.909 Q59.1344 691.909 62.0308 695.856 Q64.9272 699.771 64.9272 706.646 Q64.9272 709.51 64.3543 712.63 Q63.8132 715.717 62.6992 719.154 L56.6518 719.154 Q58.3387 715.908 59.198 712.757 Q60.0256 709.606 60.0256 706.519 Q60.0256 702.381 58.6251 700.153 Q57.1929 697.925 54.6147 697.925 Q52.2276 697.925 50.9545 699.548 Q49.6813 701.14 48.5037 706.582 L48.0262 708.619 Q46.8804 714.062 44.5251 716.481 Q42.138 718.9 38.0002 718.9 Q32.9713 718.9 30.2341 715.335 Q27.4968 711.77 27.4968 705.214 Q27.4968 701.967 27.9743 699.102 Q28.4517 696.238 29.4065 693.819 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M29.4065 659.858 L34.9447 659.858 Q33.6716 662.341 33.035 665.014 Q32.3984 667.688 32.3984 670.552 Q32.3984 674.913 33.7352 677.109 Q35.072 679.273 37.7456 679.273 Q39.7826 679.273 40.9603 677.714 Q42.1061 676.154 43.1565 671.444 L43.6021 669.438 Q44.9389 663.2 47.3897 660.59 Q49.8086 657.948 54.1691 657.948 Q59.1344 657.948 62.0308 661.895 Q64.9272 665.81 64.9272 672.685 Q64.9272 675.549 64.3543 678.669 Q63.8132 681.756 62.6992 685.193 L56.6518 685.193 Q58.3387 681.947 59.198 678.796 Q60.0256 675.645 60.0256 672.558 Q60.0256 668.42 58.6251 666.192 Q57.1929 663.964 54.6147 663.964 Q52.2276 663.964 50.9545 665.587 Q49.6813 667.178 48.5037 672.621 L48.0262 674.658 Q46.8804 680.101 44.5251 682.52 Q42.138 684.939 38.0002 684.939 Q32.9713 684.939 30.2341 681.374 Q27.4968 677.809 27.4968 671.253 Q27.4968 668.006 27.9743 665.141 Q28.4517 662.277 29.4065 659.858 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip932)\" cx=\"294.087\" cy=\"1384.24\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip932)\" cx=\"560.581\" cy=\"865.017\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip932)\" cx=\"1226.82\" cy=\"475.601\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip932)\" cx=\"1759.81\" cy=\"280.894\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip932)\" cx=\"2292.79\" cy=\"86.1857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n```\n:::\n:::\n\n\n1. Create the matrix $X$, the vector $\\beta$ and solve the normal equation with the operator [`Base.\\`](https://tinyurl.com/juliadoc-base-backslash).\n\n::: {.callout-tip collapse=\"true\"}\n## Hint\n\nUse `ones(m)` to generate a vector of 1 of length $m$.\n:::\n\n::: {#d0723c53 .cell execution_count=29}\n``` {.julia .cell-code code-fold=\"true\" code-summary=\"Show the answer\"}\nm = length(dataset.Time)\nX = [ones(m) dataset.Time]\ny = dataset.Mass\nÎ² = X\\y\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n2-element Vector{Float64}:\n 11.506493506493449\n 12.207792207792208\n```\n:::\n:::\n\n\n4. Plot the linear model on the same plot as the data. Use the `plot!` function. See the [basic concepts for plotting](https://docs.juliaplots.org/stable/basics/#Basic-Concepts).\n\n::: {#320dc4a0 .cell execution_count=30}\n``` {.julia .cell-code code-fold=\"true\" code-summary=\"Show the answer\"}\nx = [5, 20]\ny = Î²[1] .+ Î²[2]*x\nplot!(plt, x, y)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 8.88178e-14 L0 8.88178e-14  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M234.125 1423.18 L2352.76 1423.18 L2352.76 47.2441 L234.125 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"234\" y=\"47\" width=\"2120\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"427.334,1423.18 427.334,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"827.075,1423.18 827.075,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1226.82,1423.18 1226.82,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1626.56,1423.18 1626.56,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2026.3,1423.18 2026.3,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,1324.05 2352.76,1324.05 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,1023.1 2352.76,1023.1 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,722.158 2352.76,722.158 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,421.212 2352.76,421.212 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"234.125,120.267 2352.76,120.267 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"427.334,1423.18 427.334,1404.28 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"827.075,1423.18 827.075,1404.28 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1226.82,1423.18 1226.82,1404.28 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1626.56,1423.18 1626.56,1404.28 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2026.3,1423.18 2026.3,1404.28 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M427.739 1466.44 Q424.591 1466.44 422.739 1468.59 Q420.91 1470.74 420.91 1474.49 Q420.91 1478.22 422.739 1480.39 Q424.591 1482.55 427.739 1482.55 Q430.887 1482.55 432.716 1480.39 Q434.568 1478.22 434.568 1474.49 Q434.568 1470.74 432.716 1468.59 Q430.887 1466.44 427.739 1466.44 M437.021 1451.78 L437.021 1456.04 Q435.262 1455.21 433.457 1454.77 Q431.674 1454.33 429.915 1454.33 Q425.285 1454.33 422.832 1457.45 Q420.401 1460.58 420.054 1466.9 Q421.42 1464.89 423.48 1463.82 Q425.54 1462.73 428.017 1462.73 Q433.225 1462.73 436.234 1465.9 Q439.267 1469.05 439.267 1474.49 Q439.267 1479.82 436.119 1483.03 Q432.97 1486.25 427.739 1486.25 Q421.744 1486.25 418.572 1481.67 Q415.401 1477.06 415.401 1468.33 Q415.401 1460.14 419.29 1455.28 Q423.179 1450.39 429.73 1450.39 Q431.489 1450.39 433.271 1450.74 Q435.077 1451.09 437.021 1451.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M817.376 1484.86 L817.376 1480.6 Q819.136 1481.44 820.941 1481.88 Q822.747 1482.32 824.483 1482.32 Q829.113 1482.32 831.543 1479.21 Q833.997 1476.09 834.344 1469.75 Q833.001 1471.74 830.941 1472.8 Q828.881 1473.87 826.381 1473.87 Q821.196 1473.87 818.163 1470.74 Q815.154 1467.59 815.154 1462.15 Q815.154 1456.83 818.302 1453.61 Q821.451 1450.39 826.682 1450.39 Q832.677 1450.39 835.825 1455 Q838.997 1459.58 838.997 1468.33 Q838.997 1476.51 835.108 1481.39 Q831.242 1486.25 824.691 1486.25 Q822.932 1486.25 821.126 1485.9 Q819.321 1485.56 817.376 1484.86 M826.682 1470.21 Q829.83 1470.21 831.659 1468.06 Q833.511 1465.9 833.511 1462.15 Q833.511 1458.43 831.659 1456.27 Q829.83 1454.1 826.682 1454.1 Q823.534 1454.1 821.682 1456.27 Q819.853 1458.43 819.853 1462.15 Q819.853 1465.9 821.682 1468.06 Q823.534 1470.21 826.682 1470.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1202.3 1481.64 L1209.94 1481.64 L1209.94 1455.28 L1201.63 1456.95 L1201.63 1452.69 L1209.9 1451.02 L1214.57 1451.02 L1214.57 1481.64 L1222.21 1481.64 L1222.21 1485.58 L1202.3 1485.58 L1202.3 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1235.68 1481.64 L1252 1481.64 L1252 1485.58 L1230.06 1485.58 L1230.06 1481.64 Q1232.72 1478.89 1237.3 1474.26 Q1241.91 1469.61 1243.09 1468.27 Q1245.34 1465.74 1246.22 1464.01 Q1247.12 1462.25 1247.12 1460.56 Q1247.12 1457.8 1245.17 1456.07 Q1243.25 1454.33 1240.15 1454.33 Q1237.95 1454.33 1235.5 1455.09 Q1233.07 1455.86 1230.29 1457.41 L1230.29 1452.69 Q1233.11 1451.55 1235.57 1450.97 Q1238.02 1450.39 1240.06 1450.39 Q1245.43 1450.39 1248.62 1453.08 Q1251.82 1455.77 1251.82 1460.26 Q1251.82 1462.39 1251.01 1464.31 Q1250.22 1466.2 1248.11 1468.8 Q1247.53 1469.47 1244.43 1472.69 Q1241.33 1475.88 1235.68 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1601.74 1481.64 L1609.38 1481.64 L1609.38 1455.28 L1601.07 1456.95 L1601.07 1452.69 L1609.34 1451.02 L1614.01 1451.02 L1614.01 1481.64 L1621.65 1481.64 L1621.65 1485.58 L1601.74 1485.58 L1601.74 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1631.14 1451.02 L1649.5 1451.02 L1649.5 1454.96 L1635.42 1454.96 L1635.42 1463.43 Q1636.44 1463.08 1637.46 1462.92 Q1638.48 1462.73 1639.5 1462.73 Q1645.29 1462.73 1648.67 1465.9 Q1652.04 1469.08 1652.04 1474.49 Q1652.04 1480.07 1648.57 1483.17 Q1645.1 1486.25 1638.78 1486.25 Q1636.6 1486.25 1634.34 1485.88 Q1632.09 1485.51 1629.68 1484.77 L1629.68 1480.07 Q1631.77 1481.2 1633.99 1481.76 Q1636.21 1482.32 1638.69 1482.32 Q1642.69 1482.32 1645.03 1480.21 Q1647.37 1478.1 1647.37 1474.49 Q1647.37 1470.88 1645.03 1468.77 Q1642.69 1466.67 1638.69 1466.67 Q1636.81 1466.67 1634.94 1467.08 Q1633.09 1467.5 1631.14 1468.38 L1631.14 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2001.03 1481.64 L2008.67 1481.64 L2008.67 1455.28 L2000.36 1456.95 L2000.36 1452.69 L2008.63 1451.02 L2013.3 1451.02 L2013.3 1481.64 L2020.94 1481.64 L2020.94 1485.58 L2001.03 1485.58 L2001.03 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2040.39 1469.17 Q2037.05 1469.17 2035.13 1470.95 Q2033.23 1472.73 2033.23 1475.86 Q2033.23 1478.98 2035.13 1480.77 Q2037.05 1482.55 2040.39 1482.55 Q2043.72 1482.55 2045.64 1480.77 Q2047.56 1478.96 2047.56 1475.86 Q2047.56 1472.73 2045.64 1470.95 Q2043.74 1469.17 2040.39 1469.17 M2035.71 1467.18 Q2032.7 1466.44 2031.01 1464.38 Q2029.34 1462.32 2029.34 1459.35 Q2029.34 1455.21 2032.28 1452.8 Q2035.25 1450.39 2040.39 1450.39 Q2045.55 1450.39 2048.49 1452.8 Q2051.43 1455.21 2051.43 1459.35 Q2051.43 1462.32 2049.74 1464.38 Q2048.07 1466.44 2045.08 1467.18 Q2048.46 1467.96 2050.34 1470.26 Q2052.24 1472.55 2052.24 1475.86 Q2052.24 1480.88 2049.16 1483.57 Q2046.1 1486.25 2040.39 1486.25 Q2034.67 1486.25 2031.59 1483.57 Q2028.53 1480.88 2028.53 1475.86 Q2028.53 1472.55 2030.43 1470.26 Q2032.33 1467.96 2035.71 1467.18 M2034 1459.79 Q2034 1462.48 2035.66 1463.98 Q2037.35 1465.49 2040.39 1465.49 Q2043.4 1465.49 2045.08 1463.98 Q2046.8 1462.48 2046.8 1459.79 Q2046.8 1457.11 2045.08 1455.6 Q2043.4 1454.1 2040.39 1454.1 Q2037.35 1454.1 2035.66 1455.6 Q2034 1457.11 2034 1459.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1215.32 1520.52 L1255.52 1520.52 L1255.52 1525.93 L1238.65 1525.93 L1238.65 1568.04 L1232.19 1568.04 L1232.19 1525.93 L1215.32 1525.93 L1215.32 1520.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1259.46 1532.4 L1265.32 1532.4 L1265.32 1568.04 L1259.46 1568.04 L1259.46 1532.4 M1259.46 1518.52 L1265.32 1518.52 L1265.32 1525.93 L1259.46 1525.93 L1259.46 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1305.33 1539.24 Q1307.52 1535.29 1310.58 1533.41 Q1313.64 1531.54 1317.77 1531.54 Q1323.34 1531.54 1326.37 1535.45 Q1329.39 1539.33 1329.39 1546.53 L1329.39 1568.04 L1323.5 1568.04 L1323.5 1546.72 Q1323.5 1541.59 1321.69 1539.11 Q1319.87 1536.63 1316.15 1536.63 Q1311.6 1536.63 1308.96 1539.65 Q1306.32 1542.68 1306.32 1547.9 L1306.32 1568.04 L1300.43 1568.04 L1300.43 1546.72 Q1300.43 1541.56 1298.61 1539.11 Q1296.8 1536.63 1293.01 1536.63 Q1288.52 1536.63 1285.88 1539.68 Q1283.24 1542.71 1283.24 1547.9 L1283.24 1568.04 L1277.35 1568.04 L1277.35 1532.4 L1283.24 1532.4 L1283.24 1537.93 Q1285.24 1534.66 1288.05 1533.1 Q1290.85 1531.54 1294.7 1531.54 Q1298.58 1531.54 1301.29 1533.51 Q1304.02 1535.48 1305.33 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1371.56 1548.76 L1371.56 1551.62 L1344.64 1551.62 Q1345.02 1557.67 1348.27 1560.85 Q1351.54 1564 1357.37 1564 Q1360.74 1564 1363.89 1563.17 Q1367.08 1562.35 1370.2 1560.69 L1370.2 1566.23 Q1367.04 1567.57 1363.73 1568.27 Q1360.42 1568.97 1357.02 1568.97 Q1348.49 1568.97 1343.49 1564 Q1338.53 1559.04 1338.53 1550.57 Q1338.53 1541.82 1343.24 1536.69 Q1347.98 1531.54 1356 1531.54 Q1363.19 1531.54 1367.36 1536.18 Q1371.56 1540.8 1371.56 1548.76 M1365.71 1547.04 Q1365.64 1542.23 1363 1539.37 Q1360.39 1536.5 1356.06 1536.5 Q1351.16 1536.5 1348.2 1539.27 Q1345.27 1542.04 1344.83 1547.07 L1365.71 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1423.18 234.125,47.2441 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1324.05 253.023,1324.05 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,1023.1 253.023,1023.1 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,722.158 253.023,722.158 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,421.212 253.023,421.212 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"234.125,120.267 253.023,120.267 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M146.066 1306.77 L164.422 1306.77 L164.422 1310.7 L150.348 1310.7 L150.348 1319.18 Q151.366 1318.83 152.385 1318.67 Q153.403 1318.48 154.422 1318.48 Q160.209 1318.48 163.589 1321.65 Q166.968 1324.82 166.968 1330.24 Q166.968 1335.82 163.496 1338.92 Q160.024 1342 153.704 1342 Q151.528 1342 149.26 1341.63 Q147.015 1341.26 144.607 1340.52 L144.607 1335.82 Q146.691 1336.95 148.913 1337.51 Q151.135 1338.07 153.612 1338.07 Q157.616 1338.07 159.954 1335.96 Q162.292 1333.85 162.292 1330.24 Q162.292 1326.63 159.954 1324.52 Q157.616 1322.42 153.612 1322.42 Q151.737 1322.42 149.862 1322.83 Q148.01 1323.25 146.066 1324.13 L146.066 1306.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.181 1309.85 Q182.57 1309.85 180.741 1313.41 Q178.936 1316.95 178.936 1324.08 Q178.936 1331.19 180.741 1334.76 Q182.57 1338.3 186.181 1338.3 Q189.815 1338.3 191.621 1334.76 Q193.45 1331.19 193.45 1324.08 Q193.45 1316.95 191.621 1313.41 Q189.815 1309.85 186.181 1309.85 M186.181 1306.14 Q191.991 1306.14 195.047 1310.75 Q198.125 1315.33 198.125 1324.08 Q198.125 1332.81 195.047 1337.42 Q191.991 1342 186.181 1342 Q180.371 1342 177.292 1337.42 Q174.237 1332.81 174.237 1324.08 Q174.237 1315.33 177.292 1310.75 Q180.371 1306.14 186.181 1306.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M116.668 1036.45 L124.306 1036.45 L124.306 1010.08 L115.996 1011.75 L115.996 1007.49 L124.26 1005.82 L128.936 1005.82 L128.936 1036.45 L136.575 1036.45 L136.575 1040.38 L116.668 1040.38 L116.668 1036.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M156.019 1008.9 Q152.408 1008.9 150.579 1012.47 Q148.774 1016.01 148.774 1023.14 Q148.774 1030.24 150.579 1033.81 Q152.408 1037.35 156.019 1037.35 Q159.653 1037.35 161.459 1033.81 Q163.288 1030.24 163.288 1023.14 Q163.288 1016.01 161.459 1012.47 Q159.653 1008.9 156.019 1008.9 M156.019 1005.2 Q161.829 1005.2 164.885 1009.81 Q167.964 1014.39 167.964 1023.14 Q167.964 1031.87 164.885 1036.47 Q161.829 1041.05 156.019 1041.05 Q150.209 1041.05 147.13 1036.47 Q144.075 1031.87 144.075 1023.14 Q144.075 1014.39 147.13 1009.81 Q150.209 1005.2 156.019 1005.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.181 1008.9 Q182.57 1008.9 180.741 1012.47 Q178.936 1016.01 178.936 1023.14 Q178.936 1030.24 180.741 1033.81 Q182.57 1037.35 186.181 1037.35 Q189.815 1037.35 191.621 1033.81 Q193.45 1030.24 193.45 1023.14 Q193.45 1016.01 191.621 1012.47 Q189.815 1008.9 186.181 1008.9 M186.181 1005.2 Q191.991 1005.2 195.047 1009.81 Q198.125 1014.39 198.125 1023.14 Q198.125 1031.87 195.047 1036.47 Q191.991 1041.05 186.181 1041.05 Q180.371 1041.05 177.292 1036.47 Q174.237 1031.87 174.237 1023.14 Q174.237 1014.39 177.292 1009.81 Q180.371 1005.2 186.181 1005.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M116.668 735.503 L124.306 735.503 L124.306 709.137 L115.996 710.804 L115.996 706.545 L124.26 704.878 L128.936 704.878 L128.936 735.503 L136.575 735.503 L136.575 739.438 L116.668 739.438 L116.668 735.503 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M146.066 704.878 L164.422 704.878 L164.422 708.813 L150.348 708.813 L150.348 717.285 Q151.366 716.938 152.385 716.776 Q153.403 716.591 154.422 716.591 Q160.209 716.591 163.589 719.762 Q166.968 722.933 166.968 728.35 Q166.968 733.929 163.496 737.031 Q160.024 740.109 153.704 740.109 Q151.528 740.109 149.26 739.739 Q147.015 739.369 144.607 738.628 L144.607 733.929 Q146.691 735.063 148.913 735.619 Q151.135 736.174 153.612 736.174 Q157.616 736.174 159.954 734.068 Q162.292 731.961 162.292 728.35 Q162.292 724.739 159.954 722.632 Q157.616 720.526 153.612 720.526 Q151.737 720.526 149.862 720.943 Q148.01 721.359 146.066 722.239 L146.066 704.878 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.181 707.957 Q182.57 707.957 180.741 711.521 Q178.936 715.063 178.936 722.193 Q178.936 729.299 180.741 732.864 Q182.57 736.406 186.181 736.406 Q189.815 736.406 191.621 732.864 Q193.45 729.299 193.45 722.193 Q193.45 715.063 191.621 711.521 Q189.815 707.957 186.181 707.957 M186.181 704.253 Q191.991 704.253 195.047 708.859 Q198.125 713.443 198.125 722.193 Q198.125 730.919 195.047 735.526 Q191.991 740.109 186.181 740.109 Q180.371 740.109 177.292 735.526 Q174.237 730.919 174.237 722.193 Q174.237 713.443 177.292 708.859 Q180.371 704.253 186.181 704.253 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M119.885 434.557 L136.204 434.557 L136.204 438.492 L114.26 438.492 L114.26 434.557 Q116.922 431.803 121.505 427.173 Q126.112 422.52 127.292 421.178 Q129.538 418.655 130.417 416.918 Q131.32 415.159 131.32 413.469 Q131.32 410.715 129.376 408.979 Q127.455 407.243 124.353 407.243 Q122.154 407.243 119.7 408.006 Q117.269 408.77 114.492 410.321 L114.492 405.599 Q117.316 404.465 119.769 403.886 Q122.223 403.307 124.26 403.307 Q129.63 403.307 132.825 405.993 Q136.019 408.678 136.019 413.168 Q136.019 415.298 135.209 417.219 Q134.422 419.117 132.316 421.71 Q131.737 422.381 128.635 425.599 Q125.533 428.793 119.885 434.557 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M156.019 407.011 Q152.408 407.011 150.579 410.576 Q148.774 414.118 148.774 421.247 Q148.774 428.354 150.579 431.918 Q152.408 435.46 156.019 435.46 Q159.653 435.46 161.459 431.918 Q163.288 428.354 163.288 421.247 Q163.288 414.118 161.459 410.576 Q159.653 407.011 156.019 407.011 M156.019 403.307 Q161.829 403.307 164.885 407.914 Q167.964 412.497 167.964 421.247 Q167.964 429.974 164.885 434.58 Q161.829 439.164 156.019 439.164 Q150.209 439.164 147.13 434.58 Q144.075 429.974 144.075 421.247 Q144.075 412.497 147.13 407.914 Q150.209 403.307 156.019 403.307 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.181 407.011 Q182.57 407.011 180.741 410.576 Q178.936 414.118 178.936 421.247 Q178.936 428.354 180.741 431.918 Q182.57 435.46 186.181 435.46 Q189.815 435.46 191.621 431.918 Q193.45 428.354 193.45 421.247 Q193.45 414.118 191.621 410.576 Q189.815 407.011 186.181 407.011 M186.181 403.307 Q191.991 403.307 195.047 407.914 Q198.125 412.497 198.125 421.247 Q198.125 429.974 195.047 434.58 Q191.991 439.164 186.181 439.164 Q180.371 439.164 177.292 434.58 Q174.237 429.974 174.237 421.247 Q174.237 412.497 177.292 407.914 Q180.371 403.307 186.181 403.307 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M119.885 133.612 L136.204 133.612 L136.204 137.547 L114.26 137.547 L114.26 133.612 Q116.922 130.857 121.505 126.227 Q126.112 121.575 127.292 120.232 Q129.538 117.709 130.417 115.973 Q131.32 114.214 131.32 112.524 Q131.32 109.769 129.376 108.033 Q127.455 106.297 124.353 106.297 Q122.154 106.297 119.7 107.061 Q117.269 107.825 114.492 109.376 L114.492 104.653 Q117.316 103.519 119.769 102.94 Q122.223 102.362 124.26 102.362 Q129.63 102.362 132.825 105.047 Q136.019 107.732 136.019 112.223 Q136.019 114.352 135.209 116.274 Q134.422 118.172 132.316 120.764 Q131.737 121.436 128.635 124.653 Q125.533 127.848 119.885 133.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M146.066 102.987 L164.422 102.987 L164.422 106.922 L150.348 106.922 L150.348 115.394 Q151.366 115.047 152.385 114.885 Q153.403 114.7 154.422 114.7 Q160.209 114.7 163.589 117.871 Q166.968 121.042 166.968 126.459 Q166.968 132.038 163.496 135.139 Q160.024 138.218 153.704 138.218 Q151.528 138.218 149.26 137.848 Q147.015 137.477 144.607 136.737 L144.607 132.038 Q146.691 133.172 148.913 133.727 Q151.135 134.283 153.612 134.283 Q157.616 134.283 159.954 132.176 Q162.292 130.07 162.292 126.459 Q162.292 122.848 159.954 120.741 Q157.616 118.635 153.612 118.635 Q151.737 118.635 149.862 119.052 Q148.01 119.468 146.066 120.348 L146.066 102.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.181 106.065 Q182.57 106.065 180.741 109.63 Q178.936 113.172 178.936 120.302 Q178.936 127.408 180.741 130.973 Q182.57 134.514 186.181 134.514 Q189.815 134.514 191.621 130.973 Q193.45 127.408 193.45 120.302 Q193.45 113.172 191.621 109.63 Q189.815 106.065 186.181 106.065 M186.181 102.362 Q191.991 102.362 195.047 106.968 Q198.125 111.552 198.125 120.302 Q198.125 129.028 195.047 133.635 Q191.991 138.218 186.181 138.218 Q180.371 138.218 177.292 133.635 Q174.237 129.028 174.237 120.302 Q174.237 111.552 177.292 106.968 Q180.371 102.362 186.181 102.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M16.4842 812.476 L16.4842 802.895 L48.8219 790.769 L16.4842 778.578 L16.4842 768.998 L64.0042 768.998 L64.0042 775.268 L22.277 775.268 L54.8694 787.522 L54.8694 793.983 L22.277 806.237 L64.0042 806.237 L64.0042 812.476 L16.4842 812.476 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M46.0847 740.289 Q46.0847 747.386 47.7079 750.124 Q49.3312 752.861 53.2461 752.861 Q56.3653 752.861 58.2114 750.824 Q60.0256 748.755 60.0256 745.222 Q60.0256 740.352 56.5881 737.424 Q53.1188 734.464 47.3897 734.464 L46.0847 734.464 L46.0847 740.289 M43.6657 728.608 L64.0042 728.608 L64.0042 734.464 L58.5933 734.464 Q61.8398 736.469 63.3994 739.461 Q64.9272 742.453 64.9272 746.782 Q64.9272 752.256 61.8716 755.503 Q58.7843 758.717 53.6281 758.717 Q47.6125 758.717 44.5569 754.707 Q41.5014 750.665 41.5014 742.676 L41.5014 734.464 L40.9285 734.464 Q36.8862 734.464 34.6901 737.138 Q32.4621 739.779 32.4621 744.585 Q32.4621 747.641 33.1941 750.537 Q33.9262 753.434 35.3903 756.107 L29.9795 756.107 Q28.7381 752.893 28.1334 749.869 Q27.4968 746.845 27.4968 743.981 Q27.4968 736.246 31.5072 732.427 Q35.5176 728.608 43.6657 728.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M29.4065 693.819 L34.9447 693.819 Q33.6716 696.302 33.035 698.975 Q32.3984 701.649 32.3984 704.513 Q32.3984 708.874 33.7352 711.07 Q35.072 713.234 37.7456 713.234 Q39.7826 713.234 40.9603 711.675 Q42.1061 710.115 43.1565 705.405 L43.6021 703.399 Q44.9389 697.161 47.3897 694.551 Q49.8086 691.909 54.1691 691.909 Q59.1344 691.909 62.0308 695.856 Q64.9272 699.771 64.9272 706.646 Q64.9272 709.51 64.3543 712.63 Q63.8132 715.717 62.6992 719.154 L56.6518 719.154 Q58.3387 715.908 59.198 712.757 Q60.0256 709.606 60.0256 706.519 Q60.0256 702.381 58.6251 700.153 Q57.1929 697.925 54.6147 697.925 Q52.2276 697.925 50.9545 699.548 Q49.6813 701.14 48.5037 706.582 L48.0262 708.619 Q46.8804 714.062 44.5251 716.481 Q42.138 718.9 38.0002 718.9 Q32.9713 718.9 30.2341 715.335 Q27.4968 711.77 27.4968 705.214 Q27.4968 701.967 27.9743 699.102 Q28.4517 696.238 29.4065 693.819 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M29.4065 659.858 L34.9447 659.858 Q33.6716 662.341 33.035 665.014 Q32.3984 667.688 32.3984 670.552 Q32.3984 674.913 33.7352 677.109 Q35.072 679.273 37.7456 679.273 Q39.7826 679.273 40.9603 677.714 Q42.1061 676.154 43.1565 671.444 L43.6021 669.438 Q44.9389 663.2 47.3897 660.59 Q49.8086 657.948 54.1691 657.948 Q59.1344 657.948 62.0308 661.895 Q64.9272 665.81 64.9272 672.685 Q64.9272 675.549 64.3543 678.669 Q63.8132 681.756 62.6992 685.193 L56.6518 685.193 Q58.3387 681.947 59.198 678.796 Q60.0256 675.645 60.0256 672.558 Q60.0256 668.42 58.6251 666.192 Q57.1929 663.964 54.6147 663.964 Q52.2276 663.964 50.9545 665.587 Q49.6813 667.178 48.5037 672.621 L48.0262 674.658 Q46.8804 680.101 44.5251 682.52 Q42.138 684.939 38.0002 684.939 Q32.9713 684.939 30.2341 681.374 Q27.4968 677.809 27.4968 671.253 Q27.4968 668.006 27.9743 665.141 Q28.4517 662.277 29.4065 659.858 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip022)\" cx=\"294.087\" cy=\"1384.24\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip022)\" cx=\"560.581\" cy=\"902.725\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip022)\" cx=\"1226.82\" cy=\"541.591\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip022)\" cx=\"1759.81\" cy=\"361.023\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip022)\" cx=\"2292.79\" cy=\"180.456\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"294.087,1188.35 2292.79,86.1857 \"/>\n</svg>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "foretaste_of_julia_code_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}