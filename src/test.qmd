---
title: "Test"
page-layout: article
jupyter: julia-1.11
---

```{julia}
#| echo: false
include("activate.jl")
```

```{julia}
@myshow begin #| hide
x = 10          # x is inferred to be of type Int64
y = 3.14        # y is inferred to be of type Float64
z = "Hello"     # z is inferred to be of type String

typeof(x), typeof(y), typeof(z)
end false #| hide
```


```{julia}
#| error: true
@myshow begin #| hide
a = 1+0
a + 2
b = 1
b
g(x) = 2
g(3)
function f(x)
    return x + 2
end
f(3)
function make_closure(x)
    return (y) -> x*y
end
double = make_closure(2)
double(3)
1 + "2"
end false #| hide
```


```{julia}
# Define a simple struct for a point in 2D space
struct Point
    x::Float64
    y::Float64
end
```

```{julia}
struct Circle
    center::Point
    radius::Float64
end

# Define a custom constructor
function Circle(x::Real, y::Real, radius::Real)
    if radius <= 0
        throw(DomainError(radius, "Radius must be positive"))
    end
    Circle(Point(float(x), float(y)), float(radius))
end
nothing #| hide
```

```{julia}
#| error: true

@myshow begin #| hide
# Create a Circle using the custom constructor
c = Circle(0, 0, 5)  # Creates a Circle with center (0.0, 0.0) and radius 5.0

# Attempt to create a Circle with an invalid radius
c = Circle(0, 0, -3)  # Throws an error: "Radius must be positive"
end false #| hide
```